2024-09-20 00:58:58 [ERROR] o.a.c.c.C.[.[localhost].[/].[jsp] - Servlet.service() for servlet [jsp] threw exception
jakarta.el.PropertyNotFoundException: Property [name] not found on type [java.lang.String]
	at jakarta.el.BeanELResolver$BeanProperties.get(BeanELResolver.java:261)
	at jakarta.el.BeanELResolver.property(BeanELResolver.java:330)
	at jakarta.el.BeanELResolver.getValue(BeanELResolver.java:99)
	at org.apache.jasper.el.JasperELResolver.getValue(JasperELResolver.java:130)
	at org.apache.el.parser.AstValue.getValue(AstValue.java:169)
	at org.apache.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:170)
	at org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(PageContextImpl.java:701)
	at org.apache.jsp.WEB_002dINF.jsp.user.recommended.answer_jsp._jspx_meth_c_005fforEach_005f0(answer_jsp.java:311)
	at org.apache.jsp.WEB_002dINF.jsp.user.recommended.answer_jsp._jspx_meth_c_005fotherwise_005f0(answer_jsp.java:269)
	at org.apache.jsp.WEB_002dINF.jsp.user.recommended.answer_jsp._jspx_meth_c_005fchoose_005f0(answer_jsp.java:198)
	at org.apache.jsp.WEB_002dINF.jsp.user.recommended.answer_jsp._jspService(answer_jsp.java:149)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:67)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:456)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:377)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:325)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:632)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:408)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:330)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:267)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:171)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:314)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1432)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1168)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-09-20 00:58:58 [ERROR] o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [An exception occurred processing [/WEB-INF/jsp/user/recommended/answer.jsp] at line [15]

12:             <c:otherwise>
13:                 <c:forEach var="location" items="${response}">
14:                     <p>
15:                         <strong>장소 이름:</strong> ${location.name} <br>
16:                         <strong>주소:</strong> ${location.address} <br>
17:                         <strong>홈페이지:</strong> <a href="${location.website}" target="_blank">${location.website}</a>
18:                     </p>


Stacktrace:] with root cause
jakarta.el.PropertyNotFoundException: Property [name] not found on type [java.lang.String]
	at jakarta.el.BeanELResolver$BeanProperties.get(BeanELResolver.java:261)
	at jakarta.el.BeanELResolver.property(BeanELResolver.java:330)
	at jakarta.el.BeanELResolver.getValue(BeanELResolver.java:99)
	at org.apache.jasper.el.JasperELResolver.getValue(JasperELResolver.java:130)
	at org.apache.el.parser.AstValue.getValue(AstValue.java:169)
	at org.apache.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:170)
	at org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(PageContextImpl.java:701)
	at org.apache.jsp.WEB_002dINF.jsp.user.recommended.answer_jsp._jspx_meth_c_005fforEach_005f0(answer_jsp.java:311)
	at org.apache.jsp.WEB_002dINF.jsp.user.recommended.answer_jsp._jspx_meth_c_005fotherwise_005f0(answer_jsp.java:269)
	at org.apache.jsp.WEB_002dINF.jsp.user.recommended.answer_jsp._jspx_meth_c_005fchoose_005f0(answer_jsp.java:198)
	at org.apache.jsp.WEB_002dINF.jsp.user.recommended.answer_jsp._jspService(answer_jsp.java:149)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:67)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:456)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:377)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:325)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:632)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:408)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:330)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:267)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:171)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:314)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1432)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1168)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-09-20 00:59:14 [ERROR] o.a.c.c.C.[.[localhost].[/].[jsp] - Servlet.service() for servlet [jsp] threw exception
jakarta.el.PropertyNotFoundException: Property [name] not found on type [java.lang.String]
	at jakarta.el.BeanELResolver$BeanProperties.get(BeanELResolver.java:261)
	at jakarta.el.BeanELResolver.property(BeanELResolver.java:330)
	at jakarta.el.BeanELResolver.getValue(BeanELResolver.java:99)
	at org.apache.jasper.el.JasperELResolver.getValue(JasperELResolver.java:130)
	at org.apache.el.parser.AstValue.getValue(AstValue.java:169)
	at org.apache.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:170)
	at org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(PageContextImpl.java:701)
	at org.apache.jsp.WEB_002dINF.jsp.user.recommended.answer_jsp._jspx_meth_c_005fforEach_005f0(answer_jsp.java:311)
	at org.apache.jsp.WEB_002dINF.jsp.user.recommended.answer_jsp._jspx_meth_c_005fotherwise_005f0(answer_jsp.java:269)
	at org.apache.jsp.WEB_002dINF.jsp.user.recommended.answer_jsp._jspx_meth_c_005fchoose_005f0(answer_jsp.java:198)
	at org.apache.jsp.WEB_002dINF.jsp.user.recommended.answer_jsp._jspService(answer_jsp.java:149)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:67)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:456)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:377)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:325)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:632)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:408)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:330)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:267)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:171)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:314)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1432)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1168)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-09-20 00:59:14 [ERROR] o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [An exception occurred processing [/WEB-INF/jsp/user/recommended/answer.jsp] at line [15]

12:             <c:otherwise>
13:                 <c:forEach var="location" items="${response}">
14:                     <p>
15:                         <strong>장소 이름:</strong> ${location.name} <br>
16:                         <strong>주소:</strong> ${location.address} <br>
17:                         <strong>홈페이지:</strong> <a href="${location.website}" target="_blank">${location.website}</a>
18:                     </p>


Stacktrace:] with root cause
jakarta.el.PropertyNotFoundException: Property [name] not found on type [java.lang.String]
	at jakarta.el.BeanELResolver$BeanProperties.get(BeanELResolver.java:261)
	at jakarta.el.BeanELResolver.property(BeanELResolver.java:330)
	at jakarta.el.BeanELResolver.getValue(BeanELResolver.java:99)
	at org.apache.jasper.el.JasperELResolver.getValue(JasperELResolver.java:130)
	at org.apache.el.parser.AstValue.getValue(AstValue.java:169)
	at org.apache.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:170)
	at org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(PageContextImpl.java:701)
	at org.apache.jsp.WEB_002dINF.jsp.user.recommended.answer_jsp._jspx_meth_c_005fforEach_005f0(answer_jsp.java:311)
	at org.apache.jsp.WEB_002dINF.jsp.user.recommended.answer_jsp._jspx_meth_c_005fotherwise_005f0(answer_jsp.java:269)
	at org.apache.jsp.WEB_002dINF.jsp.user.recommended.answer_jsp._jspx_meth_c_005fchoose_005f0(answer_jsp.java:198)
	at org.apache.jsp.WEB_002dINF.jsp.user.recommended.answer_jsp._jspService(answer_jsp.java:149)
	at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:67)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:456)
	at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:377)
	at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:325)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.ApplicationDispatcher.invoke(ApplicationDispatcher.java:632)
	at org.apache.catalina.core.ApplicationDispatcher.processRequest(ApplicationDispatcher.java:408)
	at org.apache.catalina.core.ApplicationDispatcher.doForward(ApplicationDispatcher.java:330)
	at org.apache.catalina.core.ApplicationDispatcher.forward(ApplicationDispatcher.java:267)
	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:171)
	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:314)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1432)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1168)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-09-20 01:45:42 [ERROR] o.s.b.w.e.tomcat.TomcatStarter - Error starting Tomcat context. Exception: org.springframework.beans.factory.BeanCreationException. Message: Error creating bean with name 'formContentFilter' defined in class path resource [org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.class]: Failed to instantiate [org.springframework.boot.web.servlet.filter.OrderedFormContentFilter]: Factory method 'formContentFilter' threw exception with message: com/fasterxml/jackson/databind/cfg/DatatypeFeature
2024-09-20 01:45:42 [ERROR] o.s.boot.SpringApplication - Application run failed
org.springframework.context.ApplicationContextException: Unable to start web server
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:165)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:619)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:335)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1363)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1352)
	at com.example.demo.ProjectTripsetApplication.main(ProjectTripsetApplication.java:10)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:50)
Caused by: org.springframework.boot.web.server.WebServerException: Unable to start embedded Tomcat
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:145)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:105)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:499)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:218)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
	... 11 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'formContentFilter' defined in class path resource [org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.class]: Failed to instantiate [org.springframework.boot.web.servlet.filter.OrderedFormContentFilter]: Factory method 'formContentFilter' threw exception with message: com/fasterxml/jackson/databind/cfg/DatatypeFeature
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:485)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1355)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:205)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:210)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:173)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAsRegistrationBean(ServletContextInitializerBeans.java:168)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addAdaptableBeans(ServletContextInitializerBeans.java:153)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:266)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:240)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:52)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:4414)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1203)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1193)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:749)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:772)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1203)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1193)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:145)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:749)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:203)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:415)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:874)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:437)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:126)
	... 16 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.web.servlet.filter.OrderedFormContentFilter]: Factory method 'formContentFilter' threw exception with message: com/fasterxml/jackson/databind/cfg/DatatypeFeature
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:178)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:644)
	... 57 common frames omitted
Caused by: java.lang.NoClassDefFoundError: com/fasterxml/jackson/databind/cfg/DatatypeFeature
	at org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.configureFeature(Jackson2ObjectMapperBuilder.java:845)
	at org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.customizeDefaultFeatures(Jackson2ObjectMapperBuilder.java:812)
	at org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.configure(Jackson2ObjectMapperBuilder.java:782)
	at org.springframework.http.converter.json.Jackson2ObjectMapperBuilder.build(Jackson2ObjectMapperBuilder.java:704)
	at org.springframework.http.converter.json.MappingJackson2HttpMessageConverter.<init>(MappingJackson2HttpMessageConverter.java:63)
	at org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter.<init>(AllEncompassingFormHttpMessageConverter.java:85)
	at org.springframework.web.filter.FormContentFilter.<init>(FormContentFilter.java:61)
	at org.springframework.boot.web.servlet.filter.OrderedFormContentFilter.<init>(OrderedFormContentFilter.java:29)
	at org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration.formContentFilter(WebMvcAutoConfiguration.java:174)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:146)
	... 58 common frames omitted
Caused by: java.lang.ClassNotFoundException: com.fasterxml.jackson.databind.cfg.DatatypeFeature
	... 70 common frames omitted
2024-09-20 13:45:47 [ERROR] o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Failed to parse response from Flask server] with root cause
java.lang.ClassCastException: class java.lang.String cannot be cast to class java.util.List (java.lang.String and java.util.List are in module java.base of loader 'bootstrap')
	at com.example.demo.service.RecommendedService.sendQuestionToFlask(RecommendedService.java:54)
	at com.example.demo.controller.UsrRecommendedController.askQuestion(UsrRecommendedController.java:32)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-09-20 14:06:53 [ERROR] o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Failed to parse response from Flask server] with root cause
java.lang.ClassCastException: class java.lang.String cannot be cast to class java.util.List (java.lang.String and java.util.List are in module java.base of loader 'bootstrap')
	at com.example.demo.service.RecommendedService.sendQuestionToFlask(RecommendedService.java:55)
	at com.example.demo.controller.UsrRecommendedController.askQuestion(UsrRecommendedController.java:32)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-09-20 14:30:47 [ERROR] o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: Failed to parse response from Flask server] with root cause
java.lang.RuntimeException: Result 필드가 예상한 형식이 아닙니다.
	at com.example.demo.service.RecommendedService.sendQuestionToFlask(RecommendedService.java:61)
	at com.example.demo.controller.UsrRecommendedController.askQuestion(UsrRecommendedController.java:32)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-09-20 14:46:54 [ERROR] o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.web.client.HttpServerErrorException$InternalServerError: 500 INTERNAL SERVER ERROR: "<!doctype html><EOL><html lang=en><EOL>  <head><EOL>    <title>UnboundLocalError: cannot access local variable &#39;location&#39; where it is not associated with a value<EOL> // Werkzeug Debugger</title><EOL>    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"><EOL>    <link rel="shortcut icon"<EOL>        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png"><EOL>    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script><EOL>    <script><EOL>      var CONSOLE_MODE = false,<EOL>          EVALEX = true,<EOL>          EVALEX_TRUSTED = false,<EOL>          SECRET = "rzfgAik2aWLh3ImCfwbJ";<EOL>    </script><EOL>  </head><EOL>  <body style="background-color: #fff"><EOL>    <div class="debugger"><EOL><h1>UnboundLocalError</h1><EOL><div class="detail"><EOL>  <p class="errormsg">UnboundLocalError: cannot access local variable &#39;location&#39; where it is not associated with a value<EOL></p><EOL></div><EOL><h2 class="traceback">Traceback <em>(most recent call last)</em></h2><EOL><div class="traceback"><EOL>  <h3></h3><EOL>  <ul><li><div class="frame" id="frame-2157347060560"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">1498</em>,<EOL>      in <code class="function">__call__</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre><EOL><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre><EOL><pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre><EOL><pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre><EOL><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre><EOL><pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)<EOL><span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2157347060128"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">1476</em>,<EOL>      in <code class="function">wsgi_app</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre><EOL><pre class="line before"><span class="ws">                </span>ctx.push()</pre><EOL><pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre><EOL><pre class="line before"><span class="ws">            </span>except Exception as e:</pre><EOL><pre class="line before"><span class="ws">                </span>error = e</pre><EOL><pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)<EOL><span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre><EOL><pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre><EOL><pre class="line after"><span class="ws">                </span>raise</pre><EOL><pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre><EOL><pre class="line after"><span class="ws">        </span>finally:</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2157347061568"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py"</cite>,<EOL>      line <em class="line">194</em>,<EOL>      in <code class="function">wrapped_function</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre><EOL><pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre><EOL><pre class="line before"><span class="ws">        </span>if options.get(&#39;intercept_exceptions&#39;, True):</pre><EOL><pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre><EOL><pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre><EOL><pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL><span class="ws">                    </span>                                            ^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">                </span>return wrapped_function</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">            </span>if hasattr(app, &#39;handle_exception&#39;):</pre><EOL><pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre><EOL><pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2157348487664"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">1473</em>,<EOL>      in <code class="function">wsgi_app</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre><EOL><pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre><EOL><pre class="line before"><span class="ws">        </span>try:</pre><EOL><pre class="line before"><span class="ws">            </span>try:</pre><EOL><pre class="line before"><span class="ws">                </span>ctx.push()</pre><EOL><pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()<EOL><span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">            </span>except Exception as e:</pre><EOL><pre class="line after"><span class="ws">                </span>error = e</pre><EOL><pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre><EOL><pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre><EOL><pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2157348487808"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">882</em>,<EOL>      in <code class="function">full_dispatch_request</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre><EOL><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre><EOL><pre class="line before"><span class="ws">            </span>if rv is None:</pre><EOL><pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre><EOL><pre class="line before"><span class="ws">        </span>except Exception as e:</pre><EOL><pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)<EOL><span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">    </span>def finalize_request(</pre><EOL><pre class="line after"><span class="ws">        </span>self,</pre><EOL><pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2157348487952"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py"</cite>,<EOL>      line <em class="line">194</em>,<EOL>      in <code class="function">wrapped_function</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre><EOL><pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre><EOL><pre class="line before"><span class="ws">        </span>if options.get(&#39;intercept_exceptions&#39;, True):</pre><EOL><pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre><EOL><pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre><EOL><pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL><span class="ws">                    </span>                                            ^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">                </span>return wrapped_function</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">            </span>if hasattr(app, &#39;handle_exception&#39;):</pre><EOL><pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre><EOL><pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2157348488096"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">880</em>,<EOL>      in <code class="function">full_dispatch_request</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws"></span> </pre><EOL><pre class="line before"><span class="ws">        </span>try:</pre><EOL><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre><EOL><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre><EOL><pre class="line before"><span class="ws">            </span>if rv is None:</pre><EOL><pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()<EOL><span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">        </span>except Exception as e:</pre><EOL><pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre><EOL><pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2157348488240"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">865</em>,<EOL>      in <code class="function">dispatch_request</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre><EOL><pre class="line before"><span class="ws">        </span>):</pre><EOL><pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre><EOL><pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre><EOL><pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre><EOL><pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]<EOL><span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre><EOL><pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre><EOL><pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre><EOL><pre class="line after"><span class="ws">        </span>error handling.</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2157348488384"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\app.py"</cite>,<EOL>      line <em class="line">53</em>,<EOL>      in <code class="function">TextMassageMaker</code></h4><EOL>  <div class="source "><pre class="line before"><span class="ws">    </span>print(&#34;API 응답 수신&#34;)</pre><EOL><pre class="line before"><span class="ws">    </span>print(&#34;OpenAI Response:&#34;, response)</pre><EOL><pre class="line before"><span class="ws"></span> </pre><EOL><pre class="line before"><span class="ws">    </span>message_result = response.choices[0].message.content</pre><EOL><pre class="line before"><span class="ws"></span> </pre><EOL><pre class="line current"><span class="ws">    </span>locations = parse_text_to_json(message_result)<EOL><span class="ws">    </span>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">    </span>return jsonify({&#34;result&#34;: message_result})</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws"></span>def parse_text_to_json(text):</pre><EOL><pre class="line after"><span class="ws"></span> </pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2157348488528"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\app.py"</cite>,<EOL>      line <em class="line">68</em>,<EOL>      in <code class="function">parse_text_to_json</code></h4><EOL>  <div class="source "><pre class="line before"><span class="ws">        </span>if line.strip().isdigit():</pre><EOL><pre class="line before"><span class="ws">            </span>location_name = line.split(&#34;.&#34;)[1].strip()</pre><EOL><pre class="line before"><span class="ws">            </span>location = {&#34;name&#34;: location_name}</pre><EOL><pre class="line before"><span class="ws">        </span>elif &#34;- 주소:&#34; in line:</pre><EOL><pre class="line before"><span class="ws">            </span>address = line.split(&#34;:&#34;)[1].strip()</pre><EOL><pre class="line current"><span class="ws">            </span>location[&#34;address&#34;] = address<EOL><span class="ws">            </span>^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">    </span>if location:</pre><EOL><pre class="line after"><span class="ws">        </span>locations.append(location)</pre><EOL><pre class="line after"><span class="ws">    </span>return locations</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws"></span>if __name__ == &#39;__main__&#39;:</pre></div><EOL></div><EOL></ul><EOL>  <blockquote>UnboundLocalError: cannot access local variable &#39;location&#39; where it is not associated with a value<EOL></blockquote><EOL></div><EOL><EOL><div class="plain"><EOL>    <p><EOL>      This is the Copy/Paste friendly version of the traceback.<EOL>    </p><EOL>    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 1498, in __call__<EOL>    return self.wsgi_app(environ, start_response)<EOL>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 1476, in wsgi_app<EOL>    response = self.handle_exception(e)<EOL>               ^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py&#34;, line 194, in wrapped_function<EOL>    return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL>                                                ^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 1473, in wsgi_app<EOL>    response = self.full_dispatch_request()<EOL>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 882, in full_dispatch_request<EOL>    rv = self.handle_user_exception(e)<EOL>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py&#34;, line 194, in wrapped_function<EOL>    return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL>                                                ^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 880, in full_dispatch_request<EOL>    rv = self.dispatch_request()<EOL>         ^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 865, in dispatch_request<EOL>    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]<EOL>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\app.py&#34;, line 53, in TextMassageMaker<EOL>    locations = parse_text_to_json(message_result)<EOL>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\app.py&#34;, line 68, in parse_text_to_json<EOL>    location[&#34;address&#34;] = address<EOL>UnboundLocalError: cannot access local variable &#39;location&#39; where it is not associated with a value<EOL></textarea><EOL></div><EOL><div class="explanation"><EOL>  The debugger caught an exception in your WSGI application.  You can now<EOL>  look at the traceback which led to the error.  <span class="nojavascript"><EOL>  If you enable JavaScript you can also use additional features such as code<EOL>  execution (if the evalex feature is enabled), automatic pasting of the<EOL>  exceptions and much more.</span><EOL></div><EOL>      <div class="footer"><EOL>        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your<EOL>        friendly Werkzeug powered traceback interpreter.<EOL>      </div><EOL>    </div><EOL><EOL>    <div class="pin-prompt"><EOL>      <div class="inner"><EOL>        <h3>Console Locked</h3><EOL>        <p><EOL>          The console is locked and needs to be unlocked by entering the PIN.<EOL>          You can find the PIN printed out on the standard output of your<EOL>          shell that runs the server.<EOL>        <form><EOL>          <p>PIN:<EOL>            <input type=text name=pin size=14><EOL>            <input type=submit name=btn value="Confirm Pin"><EOL>        </form><EOL>      </div><EOL>    </div><EOL>  </body><EOL></html><EOL><EOL><!--<EOL><EOL>Traceback (most recent call last):<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 1498, in __call__<EOL>    return self.wsgi_app(environ, start_response)<EOL>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 1476, in wsgi_app<EOL>    response = self.handle_exception(e)<EOL>               ^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py", line 194, in wrapped_function<EOL>    return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL>                                                ^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 1473, in wsgi_app<EOL>    response = self.full_dispatch_request()<EOL>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 882, in full_dispatch_request<EOL>    rv = self.handle_user_exception(e)<EOL>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py", line 194, in wrapped_function<EOL>    return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL>                                                ^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 880, in full_dispatch_request<EOL>    rv = self.dispatch_request()<EOL>         ^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 865, in dispatch_request<EOL>    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]<EOL>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\app.py", line 53, in TextMassageMaker<EOL>    locations = parse_text_to_json(message_result)<EOL>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\app.py", line 68, in parse_text_to_json<EOL>    location["address"] = address<EOL>UnboundLocalError: cannot access local variable 'location' where it is not associated with a value<EOL><EOL><EOL>--><EOL>"] with root cause
org.springframework.web.client.HttpServerErrorException$InternalServerError: 500 INTERNAL SERVER ERROR: "<!doctype html><EOL><html lang=en><EOL>  <head><EOL>    <title>UnboundLocalError: cannot access local variable &#39;location&#39; where it is not associated with a value<EOL> // Werkzeug Debugger</title><EOL>    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"><EOL>    <link rel="shortcut icon"<EOL>        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png"><EOL>    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script><EOL>    <script><EOL>      var CONSOLE_MODE = false,<EOL>          EVALEX = true,<EOL>          EVALEX_TRUSTED = false,<EOL>          SECRET = "rzfgAik2aWLh3ImCfwbJ";<EOL>    </script><EOL>  </head><EOL>  <body style="background-color: #fff"><EOL>    <div class="debugger"><EOL><h1>UnboundLocalError</h1><EOL><div class="detail"><EOL>  <p class="errormsg">UnboundLocalError: cannot access local variable &#39;location&#39; where it is not associated with a value<EOL></p><EOL></div><EOL><h2 class="traceback">Traceback <em>(most recent call last)</em></h2><EOL><div class="traceback"><EOL>  <h3></h3><EOL>  <ul><li><div class="frame" id="frame-2157347060560"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">1498</em>,<EOL>      in <code class="function">__call__</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre><EOL><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre><EOL><pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre><EOL><pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre><EOL><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre><EOL><pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)<EOL><span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2157347060128"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">1476</em>,<EOL>      in <code class="function">wsgi_app</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre><EOL><pre class="line before"><span class="ws">                </span>ctx.push()</pre><EOL><pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre><EOL><pre class="line before"><span class="ws">            </span>except Exception as e:</pre><EOL><pre class="line before"><span class="ws">                </span>error = e</pre><EOL><pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)<EOL><span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre><EOL><pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre><EOL><pre class="line after"><span class="ws">                </span>raise</pre><EOL><pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre><EOL><pre class="line after"><span class="ws">        </span>finally:</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2157347061568"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py"</cite>,<EOL>      line <em class="line">194</em>,<EOL>      in <code class="function">wrapped_function</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre><EOL><pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre><EOL><pre class="line before"><span class="ws">        </span>if options.get(&#39;intercept_exceptions&#39;, True):</pre><EOL><pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre><EOL><pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre><EOL><pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL><span class="ws">                    </span>                                            ^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">                </span>return wrapped_function</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">            </span>if hasattr(app, &#39;handle_exception&#39;):</pre><EOL><pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre><EOL><pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2157348487664"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">1473</em>,<EOL>      in <code class="function">wsgi_app</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre><EOL><pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre><EOL><pre class="line before"><span class="ws">        </span>try:</pre><EOL><pre class="line before"><span class="ws">            </span>try:</pre><EOL><pre class="line before"><span class="ws">                </span>ctx.push()</pre><EOL><pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()<EOL><span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">            </span>except Exception as e:</pre><EOL><pre class="line after"><span class="ws">                </span>error = e</pre><EOL><pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre><EOL><pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre><EOL><pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2157348487808"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">882</em>,<EOL>      in <code class="function">full_dispatch_request</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre><EOL><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre><EOL><pre class="line before"><span class="ws">            </span>if rv is None:</pre><EOL><pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre><EOL><pre class="line before"><span class="ws">        </span>except Exception as e:</pre><EOL><pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)<EOL><span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">    </span>def finalize_request(</pre><EOL><pre class="line after"><span class="ws">        </span>self,</pre><EOL><pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2157348487952"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py"</cite>,<EOL>      line <em class="line">194</em>,<EOL>      in <code class="function">wrapped_function</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre><EOL><pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre><EOL><pre class="line before"><span class="ws">        </span>if options.get(&#39;intercept_exceptions&#39;, True):</pre><EOL><pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre><EOL><pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre><EOL><pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL><span class="ws">                    </span>                                            ^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">                </span>return wrapped_function</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">            </span>if hasattr(app, &#39;handle_exception&#39;):</pre><EOL><pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre><EOL><pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2157348488096"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">880</em>,<EOL>      in <code class="function">full_dispatch_request</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws"></span> </pre><EOL><pre class="line before"><span class="ws">        </span>try:</pre><EOL><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre><EOL><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre><EOL><pre class="line before"><span class="ws">            </span>if rv is None:</pre><EOL><pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()<EOL><span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">        </span>except Exception as e:</pre><EOL><pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre><EOL><pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2157348488240"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">865</em>,<EOL>      in <code class="function">dispatch_request</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre><EOL><pre class="line before"><span class="ws">        </span>):</pre><EOL><pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre><EOL><pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre><EOL><pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre><EOL><pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]<EOL><span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre><EOL><pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre><EOL><pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre><EOL><pre class="line after"><span class="ws">        </span>error handling.</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2157348488384"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\app.py"</cite>,<EOL>      line <em class="line">53</em>,<EOL>      in <code class="function">TextMassageMaker</code></h4><EOL>  <div class="source "><pre class="line before"><span class="ws">    </span>print(&#34;API 응답 수신&#34;)</pre><EOL><pre class="line before"><span class="ws">    </span>print(&#34;OpenAI Response:&#34;, response)</pre><EOL><pre class="line before"><span class="ws"></span> </pre><EOL><pre class="line before"><span class="ws">    </span>message_result = response.choices[0].message.content</pre><EOL><pre class="line before"><span class="ws"></span> </pre><EOL><pre class="line current"><span class="ws">    </span>locations = parse_text_to_json(message_result)<EOL><span class="ws">    </span>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">    </span>return jsonify({&#34;result&#34;: message_result})</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws"></span>def parse_text_to_json(text):</pre><EOL><pre class="line after"><span class="ws"></span> </pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2157348488528"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\app.py"</cite>,<EOL>      line <em class="line">68</em>,<EOL>      in <code class="function">parse_text_to_json</code></h4><EOL>  <div class="source "><pre class="line before"><span class="ws">        </span>if line.strip().isdigit():</pre><EOL><pre class="line before"><span class="ws">            </span>location_name = line.split(&#34;.&#34;)[1].strip()</pre><EOL><pre class="line before"><span class="ws">            </span>location = {&#34;name&#34;: location_name}</pre><EOL><pre class="line before"><span class="ws">        </span>elif &#34;- 주소:&#34; in line:</pre><EOL><pre class="line before"><span class="ws">            </span>address = line.split(&#34;:&#34;)[1].strip()</pre><EOL><pre class="line current"><span class="ws">            </span>location[&#34;address&#34;] = address<EOL><span class="ws">            </span>^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">    </span>if location:</pre><EOL><pre class="line after"><span class="ws">        </span>locations.append(location)</pre><EOL><pre class="line after"><span class="ws">    </span>return locations</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws"></span>if __name__ == &#39;__main__&#39;:</pre></div><EOL></div><EOL></ul><EOL>  <blockquote>UnboundLocalError: cannot access local variable &#39;location&#39; where it is not associated with a value<EOL></blockquote><EOL></div><EOL><EOL><div class="plain"><EOL>    <p><EOL>      This is the Copy/Paste friendly version of the traceback.<EOL>    </p><EOL>    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 1498, in __call__<EOL>    return self.wsgi_app(environ, start_response)<EOL>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 1476, in wsgi_app<EOL>    response = self.handle_exception(e)<EOL>               ^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py&#34;, line 194, in wrapped_function<EOL>    return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL>                                                ^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 1473, in wsgi_app<EOL>    response = self.full_dispatch_request()<EOL>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 882, in full_dispatch_request<EOL>    rv = self.handle_user_exception(e)<EOL>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py&#34;, line 194, in wrapped_function<EOL>    return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL>                                                ^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 880, in full_dispatch_request<EOL>    rv = self.dispatch_request()<EOL>         ^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 865, in dispatch_request<EOL>    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]<EOL>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\app.py&#34;, line 53, in TextMassageMaker<EOL>    locations = parse_text_to_json(message_result)<EOL>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\app.py&#34;, line 68, in parse_text_to_json<EOL>    location[&#34;address&#34;] = address<EOL>UnboundLocalError: cannot access local variable &#39;location&#39; where it is not associated with a value<EOL></textarea><EOL></div><EOL><div class="explanation"><EOL>  The debugger caught an exception in your WSGI application.  You can now<EOL>  look at the traceback which led to the error.  <span class="nojavascript"><EOL>  If you enable JavaScript you can also use additional features such as code<EOL>  execution (if the evalex feature is enabled), automatic pasting of the<EOL>  exceptions and much more.</span><EOL></div><EOL>      <div class="footer"><EOL>        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your<EOL>        friendly Werkzeug powered traceback interpreter.<EOL>      </div><EOL>    </div><EOL><EOL>    <div class="pin-prompt"><EOL>      <div class="inner"><EOL>        <h3>Console Locked</h3><EOL>        <p><EOL>          The console is locked and needs to be unlocked by entering the PIN.<EOL>          You can find the PIN printed out on the standard output of your<EOL>          shell that runs the server.<EOL>        <form><EOL>          <p>PIN:<EOL>            <input type=text name=pin size=14><EOL>            <input type=submit name=btn value="Confirm Pin"><EOL>        </form><EOL>      </div><EOL>    </div><EOL>  </body><EOL></html><EOL><EOL><!--<EOL><EOL>Traceback (most recent call last):<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 1498, in __call__<EOL>    return self.wsgi_app(environ, start_response)<EOL>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 1476, in wsgi_app<EOL>    response = self.handle_exception(e)<EOL>               ^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py", line 194, in wrapped_function<EOL>    return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL>                                                ^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 1473, in wsgi_app<EOL>    response = self.full_dispatch_request()<EOL>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 882, in full_dispatch_request<EOL>    rv = self.handle_user_exception(e)<EOL>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py", line 194, in wrapped_function<EOL>    return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL>                                                ^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 880, in full_dispatch_request<EOL>    rv = self.dispatch_request()<EOL>         ^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 865, in dispatch_request<EOL>    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]<EOL>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\app.py", line 53, in TextMassageMaker<EOL>    locations = parse_text_to_json(message_result)<EOL>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\app.py", line 68, in parse_text_to_json<EOL>    location["address"] = address<EOL>UnboundLocalError: cannot access local variable 'location' where it is not associated with a value<EOL><EOL><EOL>--><EOL>"
	at org.springframework.web.client.HttpServerErrorException.create(HttpServerErrorException.java:102)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:186)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:137)
	at org.springframework.web.client.ResponseErrorHandler.handleError(ResponseErrorHandler.java:63)
	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:942)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:891)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:790)
	at org.springframework.web.client.RestTemplate.postForEntity(RestTemplate.java:538)
	at com.example.demo.service.RecommendedService.sendQuestionToFlask(RecommendedService.java:45)
	at com.example.demo.controller.UsrRecommendedController.askQuestion(UsrRecommendedController.java:32)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-09-20 14:59:27 [ERROR] o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.web.client.HttpServerErrorException$InternalServerError: 500 INTERNAL SERVER ERROR: "<!doctype html><EOL><html lang=en><EOL>  <head><EOL>    <title>UnboundLocalError: cannot access local variable &#39;location&#39; where it is not associated with a value<EOL> // Werkzeug Debugger</title><EOL>    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"><EOL>    <link rel="shortcut icon"<EOL>        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png"><EOL>    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script><EOL>    <script><EOL>      var CONSOLE_MODE = false,<EOL>          EVALEX = true,<EOL>          EVALEX_TRUSTED = false,<EOL>          SECRET = "58vy5jYfzcmz0BuvZzoK";<EOL>    </script><EOL>  </head><EOL>  <body style="background-color: #fff"><EOL>    <div class="debugger"><EOL><h1>UnboundLocalError</h1><EOL><div class="detail"><EOL>  <p class="errormsg">UnboundLocalError: cannot access local variable &#39;location&#39; where it is not associated with a value<EOL></p><EOL></div><EOL><h2 class="traceback">Traceback <em>(most recent call last)</em></h2><EOL><div class="traceback"><EOL>  <h3></h3><EOL>  <ul><li><div class="frame" id="frame-2243855301024"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">1498</em>,<EOL>      in <code class="function">__call__</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre><EOL><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre><EOL><pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre><EOL><pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre><EOL><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre><EOL><pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)<EOL><span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243855301456"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">1476</em>,<EOL>      in <code class="function">wsgi_app</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre><EOL><pre class="line before"><span class="ws">                </span>ctx.push()</pre><EOL><pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre><EOL><pre class="line before"><span class="ws">            </span>except Exception as e:</pre><EOL><pre class="line before"><span class="ws">                </span>error = e</pre><EOL><pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)<EOL><span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre><EOL><pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre><EOL><pre class="line after"><span class="ws">                </span>raise</pre><EOL><pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre><EOL><pre class="line after"><span class="ws">        </span>finally:</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856695360"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py"</cite>,<EOL>      line <em class="line">194</em>,<EOL>      in <code class="function">wrapped_function</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre><EOL><pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre><EOL><pre class="line before"><span class="ws">        </span>if options.get(&#39;intercept_exceptions&#39;, True):</pre><EOL><pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre><EOL><pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre><EOL><pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL><span class="ws">                    </span>                                            ^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">                </span>return wrapped_function</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">            </span>if hasattr(app, &#39;handle_exception&#39;):</pre><EOL><pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre><EOL><pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856695936"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">1473</em>,<EOL>      in <code class="function">wsgi_app</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre><EOL><pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre><EOL><pre class="line before"><span class="ws">        </span>try:</pre><EOL><pre class="line before"><span class="ws">            </span>try:</pre><EOL><pre class="line before"><span class="ws">                </span>ctx.push()</pre><EOL><pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()<EOL><span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">            </span>except Exception as e:</pre><EOL><pre class="line after"><span class="ws">                </span>error = e</pre><EOL><pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre><EOL><pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre><EOL><pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856696080"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">882</em>,<EOL>      in <code class="function">full_dispatch_request</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre><EOL><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre><EOL><pre class="line before"><span class="ws">            </span>if rv is None:</pre><EOL><pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre><EOL><pre class="line before"><span class="ws">        </span>except Exception as e:</pre><EOL><pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)<EOL><span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">    </span>def finalize_request(</pre><EOL><pre class="line after"><span class="ws">        </span>self,</pre><EOL><pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856696224"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py"</cite>,<EOL>      line <em class="line">194</em>,<EOL>      in <code class="function">wrapped_function</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre><EOL><pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre><EOL><pre class="line before"><span class="ws">        </span>if options.get(&#39;intercept_exceptions&#39;, True):</pre><EOL><pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre><EOL><pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre><EOL><pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL><span class="ws">                    </span>                                            ^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">                </span>return wrapped_function</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">            </span>if hasattr(app, &#39;handle_exception&#39;):</pre><EOL><pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre><EOL><pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856696368"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">880</em>,<EOL>      in <code class="function">full_dispatch_request</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws"></span> </pre><EOL><pre class="line before"><span class="ws">        </span>try:</pre><EOL><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre><EOL><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre><EOL><pre class="line before"><span class="ws">            </span>if rv is None:</pre><EOL><pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()<EOL><span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">        </span>except Exception as e:</pre><EOL><pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre><EOL><pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856696512"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">865</em>,<EOL>      in <code class="function">dispatch_request</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre><EOL><pre class="line before"><span class="ws">        </span>):</pre><EOL><pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre><EOL><pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre><EOL><pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre><EOL><pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]<EOL><span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre><EOL><pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre><EOL><pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre><EOL><pre class="line after"><span class="ws">        </span>error handling.</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856696656"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\app.py"</cite>,<EOL>      line <em class="line">53</em>,<EOL>      in <code class="function">TextMassageMaker</code></h4><EOL>  <div class="source "><pre class="line before"><span class="ws">    </span>print(&#34;API 응답 수신&#34;)</pre><EOL><pre class="line before"><span class="ws">    </span>print(&#34;OpenAI Response:&#34;, response)</pre><EOL><pre class="line before"><span class="ws"></span> </pre><EOL><pre class="line before"><span class="ws">    </span>message_result = response.choices[0].message.content</pre><EOL><pre class="line before"><span class="ws"></span> </pre><EOL><pre class="line current"><span class="ws">    </span>locations = parse_text_to_json(message_result)<EOL><span class="ws">    </span>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">    </span>return jsonify({&#34;result&#34;: locations})</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws"></span>def parse_text_to_json(text):</pre><EOL><pre class="line after"><span class="ws"></span> </pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856696800"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\app.py"</cite>,<EOL>      line <em class="line">69</em>,<EOL>      in <code class="function">parse_text_to_json</code></h4><EOL>  <div class="source "><pre class="line before"><span class="ws">            </span>location_name = line.split(&#34;.&#34;)[1].strip()</pre><EOL><pre class="line before"><span class="ws">            </span>location = {&#34;name&#34;: location_name}</pre><EOL><pre class="line before"><span class="ws">        </span>elif &#34;- 주소:&#34; in line:</pre><EOL><pre class="line before"><span class="ws">            </span>address = line.split(&#34;:&#34;)[1].strip()</pre><EOL><pre class="line before"><span class="ws">            </span>location[&#34;address&#34;] = address</pre><EOL><pre class="line current"><span class="ws">    </span>if location:<EOL><span class="ws">    </span>   ^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">        </span>locations.append(location)</pre><EOL><pre class="line after"><span class="ws">    </span>return locations</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws"></span>if __name__ == &#39;__main__&#39;:</pre><EOL><pre class="line after"><span class="ws">    </span>app.run(host=&#39;127.0.0.1&#39;, debug=True, port=5001)</pre></div><EOL></div><EOL></ul><EOL>  <blockquote>UnboundLocalError: cannot access local variable &#39;location&#39; where it is not associated with a value<EOL></blockquote><EOL></div><EOL><EOL><div class="plain"><EOL>    <p><EOL>      This is the Copy/Paste friendly version of the traceback.<EOL>    </p><EOL>    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 1498, in __call__<EOL>    return self.wsgi_app(environ, start_response)<EOL>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 1476, in wsgi_app<EOL>    response = self.handle_exception(e)<EOL>               ^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py&#34;, line 194, in wrapped_function<EOL>    return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL>                                                ^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 1473, in wsgi_app<EOL>    response = self.full_dispatch_request()<EOL>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 882, in full_dispatch_request<EOL>    rv = self.handle_user_exception(e)<EOL>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py&#34;, line 194, in wrapped_function<EOL>    return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL>                                                ^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 880, in full_dispatch_request<EOL>    rv = self.dispatch_request()<EOL>         ^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 865, in dispatch_request<EOL>    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]<EOL>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\app.py&#34;, line 53, in TextMassageMaker<EOL>    locations = parse_text_to_json(message_result)<EOL>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\app.py&#34;, line 69, in parse_text_to_json<EOL>    if location:<EOL>       ^^^^^^^^^<EOL>UnboundLocalError: cannot access local variable &#39;location&#39; where it is not associated with a value<EOL></textarea><EOL></div><EOL><div class="explanation"><EOL>  The debugger caught an exception in your WSGI application.  You can now<EOL>  look at the traceback which led to the error.  <span class="nojavascript"><EOL>  If you enable JavaScript you can also use additional features such as code<EOL>  execution (if the evalex feature is enabled), automatic pasting of the<EOL>  exceptions and much more.</span><EOL></div><EOL>      <div class="footer"><EOL>        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your<EOL>        friendly Werkzeug powered traceback interpreter.<EOL>      </div><EOL>    </div><EOL><EOL>    <div class="pin-prompt"><EOL>      <div class="inner"><EOL>        <h3>Console Locked</h3><EOL>        <p><EOL>          The console is locked and needs to be unlocked by entering the PIN.<EOL>          You can find the PIN printed out on the standard output of your<EOL>          shell that runs the server.<EOL>        <form><EOL>          <p>PIN:<EOL>            <input type=text name=pin size=14><EOL>            <input type=submit name=btn value="Confirm Pin"><EOL>        </form><EOL>      </div><EOL>    </div><EOL>  </body><EOL></html><EOL><EOL><!--<EOL><EOL>Traceback (most recent call last):<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 1498, in __call__<EOL>    return self.wsgi_app(environ, start_response)<EOL>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 1476, in wsgi_app<EOL>    response = self.handle_exception(e)<EOL>               ^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py", line 194, in wrapped_function<EOL>    return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL>                                                ^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 1473, in wsgi_app<EOL>    response = self.full_dispatch_request()<EOL>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 882, in full_dispatch_request<EOL>    rv = self.handle_user_exception(e)<EOL>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py", line 194, in wrapped_function<EOL>    return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL>                                                ^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 880, in full_dispatch_request<EOL>    rv = self.dispatch_request()<EOL>         ^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 865, in dispatch_request<EOL>    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]<EOL>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\app.py", line 53, in TextMassageMaker<EOL>    locations = parse_text_to_json(message_result)<EOL>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\app.py", line 69, in parse_text_to_json<EOL>    if location:<EOL>       ^^^^^^^^^<EOL>UnboundLocalError: cannot access local variable 'location' where it is not associated with a value<EOL><EOL><EOL>--><EOL>"] with root cause
org.springframework.web.client.HttpServerErrorException$InternalServerError: 500 INTERNAL SERVER ERROR: "<!doctype html><EOL><html lang=en><EOL>  <head><EOL>    <title>UnboundLocalError: cannot access local variable &#39;location&#39; where it is not associated with a value<EOL> // Werkzeug Debugger</title><EOL>    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"><EOL>    <link rel="shortcut icon"<EOL>        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png"><EOL>    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script><EOL>    <script><EOL>      var CONSOLE_MODE = false,<EOL>          EVALEX = true,<EOL>          EVALEX_TRUSTED = false,<EOL>          SECRET = "58vy5jYfzcmz0BuvZzoK";<EOL>    </script><EOL>  </head><EOL>  <body style="background-color: #fff"><EOL>    <div class="debugger"><EOL><h1>UnboundLocalError</h1><EOL><div class="detail"><EOL>  <p class="errormsg">UnboundLocalError: cannot access local variable &#39;location&#39; where it is not associated with a value<EOL></p><EOL></div><EOL><h2 class="traceback">Traceback <em>(most recent call last)</em></h2><EOL><div class="traceback"><EOL>  <h3></h3><EOL>  <ul><li><div class="frame" id="frame-2243855301024"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">1498</em>,<EOL>      in <code class="function">__call__</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre><EOL><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre><EOL><pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre><EOL><pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre><EOL><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre><EOL><pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)<EOL><span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243855301456"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">1476</em>,<EOL>      in <code class="function">wsgi_app</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre><EOL><pre class="line before"><span class="ws">                </span>ctx.push()</pre><EOL><pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre><EOL><pre class="line before"><span class="ws">            </span>except Exception as e:</pre><EOL><pre class="line before"><span class="ws">                </span>error = e</pre><EOL><pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)<EOL><span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre><EOL><pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre><EOL><pre class="line after"><span class="ws">                </span>raise</pre><EOL><pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre><EOL><pre class="line after"><span class="ws">        </span>finally:</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856695360"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py"</cite>,<EOL>      line <em class="line">194</em>,<EOL>      in <code class="function">wrapped_function</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre><EOL><pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre><EOL><pre class="line before"><span class="ws">        </span>if options.get(&#39;intercept_exceptions&#39;, True):</pre><EOL><pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre><EOL><pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre><EOL><pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL><span class="ws">                    </span>                                            ^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">                </span>return wrapped_function</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">            </span>if hasattr(app, &#39;handle_exception&#39;):</pre><EOL><pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre><EOL><pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856695936"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">1473</em>,<EOL>      in <code class="function">wsgi_app</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre><EOL><pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre><EOL><pre class="line before"><span class="ws">        </span>try:</pre><EOL><pre class="line before"><span class="ws">            </span>try:</pre><EOL><pre class="line before"><span class="ws">                </span>ctx.push()</pre><EOL><pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()<EOL><span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">            </span>except Exception as e:</pre><EOL><pre class="line after"><span class="ws">                </span>error = e</pre><EOL><pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre><EOL><pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre><EOL><pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856696080"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">882</em>,<EOL>      in <code class="function">full_dispatch_request</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre><EOL><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre><EOL><pre class="line before"><span class="ws">            </span>if rv is None:</pre><EOL><pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre><EOL><pre class="line before"><span class="ws">        </span>except Exception as e:</pre><EOL><pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)<EOL><span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">    </span>def finalize_request(</pre><EOL><pre class="line after"><span class="ws">        </span>self,</pre><EOL><pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856696224"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py"</cite>,<EOL>      line <em class="line">194</em>,<EOL>      in <code class="function">wrapped_function</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre><EOL><pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre><EOL><pre class="line before"><span class="ws">        </span>if options.get(&#39;intercept_exceptions&#39;, True):</pre><EOL><pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre><EOL><pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre><EOL><pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL><span class="ws">                    </span>                                            ^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">                </span>return wrapped_function</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">            </span>if hasattr(app, &#39;handle_exception&#39;):</pre><EOL><pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre><EOL><pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856696368"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">880</em>,<EOL>      in <code class="function">full_dispatch_request</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws"></span> </pre><EOL><pre class="line before"><span class="ws">        </span>try:</pre><EOL><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre><EOL><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre><EOL><pre class="line before"><span class="ws">            </span>if rv is None:</pre><EOL><pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()<EOL><span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">        </span>except Exception as e:</pre><EOL><pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre><EOL><pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856696512"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">865</em>,<EOL>      in <code class="function">dispatch_request</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre><EOL><pre class="line before"><span class="ws">        </span>):</pre><EOL><pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre><EOL><pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre><EOL><pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre><EOL><pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]<EOL><span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre><EOL><pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre><EOL><pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre><EOL><pre class="line after"><span class="ws">        </span>error handling.</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856696656"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\app.py"</cite>,<EOL>      line <em class="line">53</em>,<EOL>      in <code class="function">TextMassageMaker</code></h4><EOL>  <div class="source "><pre class="line before"><span class="ws">    </span>print(&#34;API 응답 수신&#34;)</pre><EOL><pre class="line before"><span class="ws">    </span>print(&#34;OpenAI Response:&#34;, response)</pre><EOL><pre class="line before"><span class="ws"></span> </pre><EOL><pre class="line before"><span class="ws">    </span>message_result = response.choices[0].message.content</pre><EOL><pre class="line before"><span class="ws"></span> </pre><EOL><pre class="line current"><span class="ws">    </span>locations = parse_text_to_json(message_result)<EOL><span class="ws">    </span>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">    </span>return jsonify({&#34;result&#34;: locations})</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws"></span>def parse_text_to_json(text):</pre><EOL><pre class="line after"><span class="ws"></span> </pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856696800"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\app.py"</cite>,<EOL>      line <em class="line">69</em>,<EOL>      in <code class="function">parse_text_to_json</code></h4><EOL>  <div class="source "><pre class="line before"><span class="ws">            </span>location_name = line.split(&#34;.&#34;)[1].strip()</pre><EOL><pre class="line before"><span class="ws">            </span>location = {&#34;name&#34;: location_name}</pre><EOL><pre class="line before"><span class="ws">        </span>elif &#34;- 주소:&#34; in line:</pre><EOL><pre class="line before"><span class="ws">            </span>address = line.split(&#34;:&#34;)[1].strip()</pre><EOL><pre class="line before"><span class="ws">            </span>location[&#34;address&#34;] = address</pre><EOL><pre class="line current"><span class="ws">    </span>if location:<EOL><span class="ws">    </span>   ^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">        </span>locations.append(location)</pre><EOL><pre class="line after"><span class="ws">    </span>return locations</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws"></span>if __name__ == &#39;__main__&#39;:</pre><EOL><pre class="line after"><span class="ws">    </span>app.run(host=&#39;127.0.0.1&#39;, debug=True, port=5001)</pre></div><EOL></div><EOL></ul><EOL>  <blockquote>UnboundLocalError: cannot access local variable &#39;location&#39; where it is not associated with a value<EOL></blockquote><EOL></div><EOL><EOL><div class="plain"><EOL>    <p><EOL>      This is the Copy/Paste friendly version of the traceback.<EOL>    </p><EOL>    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 1498, in __call__<EOL>    return self.wsgi_app(environ, start_response)<EOL>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 1476, in wsgi_app<EOL>    response = self.handle_exception(e)<EOL>               ^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py&#34;, line 194, in wrapped_function<EOL>    return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL>                                                ^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 1473, in wsgi_app<EOL>    response = self.full_dispatch_request()<EOL>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 882, in full_dispatch_request<EOL>    rv = self.handle_user_exception(e)<EOL>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py&#34;, line 194, in wrapped_function<EOL>    return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL>                                                ^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 880, in full_dispatch_request<EOL>    rv = self.dispatch_request()<EOL>         ^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 865, in dispatch_request<EOL>    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]<EOL>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\app.py&#34;, line 53, in TextMassageMaker<EOL>    locations = parse_text_to_json(message_result)<EOL>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\app.py&#34;, line 69, in parse_text_to_json<EOL>    if location:<EOL>       ^^^^^^^^^<EOL>UnboundLocalError: cannot access local variable &#39;location&#39; where it is not associated with a value<EOL></textarea><EOL></div><EOL><div class="explanation"><EOL>  The debugger caught an exception in your WSGI application.  You can now<EOL>  look at the traceback which led to the error.  <span class="nojavascript"><EOL>  If you enable JavaScript you can also use additional features such as code<EOL>  execution (if the evalex feature is enabled), automatic pasting of the<EOL>  exceptions and much more.</span><EOL></div><EOL>      <div class="footer"><EOL>        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your<EOL>        friendly Werkzeug powered traceback interpreter.<EOL>      </div><EOL>    </div><EOL><EOL>    <div class="pin-prompt"><EOL>      <div class="inner"><EOL>        <h3>Console Locked</h3><EOL>        <p><EOL>          The console is locked and needs to be unlocked by entering the PIN.<EOL>          You can find the PIN printed out on the standard output of your<EOL>          shell that runs the server.<EOL>        <form><EOL>          <p>PIN:<EOL>            <input type=text name=pin size=14><EOL>            <input type=submit name=btn value="Confirm Pin"><EOL>        </form><EOL>      </div><EOL>    </div><EOL>  </body><EOL></html><EOL><EOL><!--<EOL><EOL>Traceback (most recent call last):<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 1498, in __call__<EOL>    return self.wsgi_app(environ, start_response)<EOL>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 1476, in wsgi_app<EOL>    response = self.handle_exception(e)<EOL>               ^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py", line 194, in wrapped_function<EOL>    return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL>                                                ^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 1473, in wsgi_app<EOL>    response = self.full_dispatch_request()<EOL>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 882, in full_dispatch_request<EOL>    rv = self.handle_user_exception(e)<EOL>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py", line 194, in wrapped_function<EOL>    return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL>                                                ^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 880, in full_dispatch_request<EOL>    rv = self.dispatch_request()<EOL>         ^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 865, in dispatch_request<EOL>    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]<EOL>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\app.py", line 53, in TextMassageMaker<EOL>    locations = parse_text_to_json(message_result)<EOL>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\app.py", line 69, in parse_text_to_json<EOL>    if location:<EOL>       ^^^^^^^^^<EOL>UnboundLocalError: cannot access local variable 'location' where it is not associated with a value<EOL><EOL><EOL>--><EOL>"
	at org.springframework.web.client.HttpServerErrorException.create(HttpServerErrorException.java:102)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:186)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:137)
	at org.springframework.web.client.ResponseErrorHandler.handleError(ResponseErrorHandler.java:63)
	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:942)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:891)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:790)
	at org.springframework.web.client.RestTemplate.postForEntity(RestTemplate.java:538)
	at com.example.demo.service.RecommendedService.sendQuestionToFlask(RecommendedService.java:45)
	at com.example.demo.controller.UsrRecommendedController.askQuestion(UsrRecommendedController.java:32)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-09-20 15:07:40 [ERROR] o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.web.client.HttpServerErrorException$InternalServerError: 500 INTERNAL SERVER ERROR: "<!doctype html><EOL><html lang=en><EOL>  <head><EOL>    <title>UnboundLocalError: cannot access local variable &#39;location&#39; where it is not associated with a value<EOL> // Werkzeug Debugger</title><EOL>    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"><EOL>    <link rel="shortcut icon"<EOL>        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png"><EOL>    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script><EOL>    <script><EOL>      var CONSOLE_MODE = false,<EOL>          EVALEX = true,<EOL>          EVALEX_TRUSTED = false,<EOL>          SECRET = "58vy5jYfzcmz0BuvZzoK";<EOL>    </script><EOL>  </head><EOL>  <body style="background-color: #fff"><EOL>    <div class="debugger"><EOL><h1>UnboundLocalError</h1><EOL><div class="detail"><EOL>  <p class="errormsg">UnboundLocalError: cannot access local variable &#39;location&#39; where it is not associated with a value<EOL></p><EOL></div><EOL><h2 class="traceback">Traceback <em>(most recent call last)</em></h2><EOL><div class="traceback"><EOL>  <h3></h3><EOL>  <ul><li><div class="frame" id="frame-2243856696944"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">1498</em>,<EOL>      in <code class="function">__call__</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre><EOL><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre><EOL><pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre><EOL><pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre><EOL><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre><EOL><pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)<EOL><span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856697664"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">1476</em>,<EOL>      in <code class="function">wsgi_app</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre><EOL><pre class="line before"><span class="ws">                </span>ctx.push()</pre><EOL><pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre><EOL><pre class="line before"><span class="ws">            </span>except Exception as e:</pre><EOL><pre class="line before"><span class="ws">                </span>error = e</pre><EOL><pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)<EOL><span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre><EOL><pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre><EOL><pre class="line after"><span class="ws">                </span>raise</pre><EOL><pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre><EOL><pre class="line after"><span class="ws">        </span>finally:</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856697808"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py"</cite>,<EOL>      line <em class="line">194</em>,<EOL>      in <code class="function">wrapped_function</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre><EOL><pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre><EOL><pre class="line before"><span class="ws">        </span>if options.get(&#39;intercept_exceptions&#39;, True):</pre><EOL><pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre><EOL><pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre><EOL><pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL><span class="ws">                    </span>                                            ^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">                </span>return wrapped_function</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">            </span>if hasattr(app, &#39;handle_exception&#39;):</pre><EOL><pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre><EOL><pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856697952"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">1473</em>,<EOL>      in <code class="function">wsgi_app</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre><EOL><pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre><EOL><pre class="line before"><span class="ws">        </span>try:</pre><EOL><pre class="line before"><span class="ws">            </span>try:</pre><EOL><pre class="line before"><span class="ws">                </span>ctx.push()</pre><EOL><pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()<EOL><span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">            </span>except Exception as e:</pre><EOL><pre class="line after"><span class="ws">                </span>error = e</pre><EOL><pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre><EOL><pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre><EOL><pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856698096"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">882</em>,<EOL>      in <code class="function">full_dispatch_request</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre><EOL><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre><EOL><pre class="line before"><span class="ws">            </span>if rv is None:</pre><EOL><pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre><EOL><pre class="line before"><span class="ws">        </span>except Exception as e:</pre><EOL><pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)<EOL><span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">    </span>def finalize_request(</pre><EOL><pre class="line after"><span class="ws">        </span>self,</pre><EOL><pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856698240"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py"</cite>,<EOL>      line <em class="line">194</em>,<EOL>      in <code class="function">wrapped_function</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre><EOL><pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre><EOL><pre class="line before"><span class="ws">        </span>if options.get(&#39;intercept_exceptions&#39;, True):</pre><EOL><pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre><EOL><pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre><EOL><pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL><span class="ws">                    </span>                                            ^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">                </span>return wrapped_function</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">            </span>if hasattr(app, &#39;handle_exception&#39;):</pre><EOL><pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre><EOL><pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856698384"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">880</em>,<EOL>      in <code class="function">full_dispatch_request</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws"></span> </pre><EOL><pre class="line before"><span class="ws">        </span>try:</pre><EOL><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre><EOL><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre><EOL><pre class="line before"><span class="ws">            </span>if rv is None:</pre><EOL><pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()<EOL><span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">        </span>except Exception as e:</pre><EOL><pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre><EOL><pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856698528"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">865</em>,<EOL>      in <code class="function">dispatch_request</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre><EOL><pre class="line before"><span class="ws">        </span>):</pre><EOL><pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre><EOL><pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre><EOL><pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre><EOL><pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]<EOL><span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre><EOL><pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre><EOL><pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre><EOL><pre class="line after"><span class="ws">        </span>error handling.</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856698672"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\app.py"</cite>,<EOL>      line <em class="line">53</em>,<EOL>      in <code class="function">TextMassageMaker</code></h4><EOL>  <div class="source "><pre class="line before"><span class="ws">    </span>print(&#34;API 응답 수신&#34;)</pre><EOL><pre class="line before"><span class="ws">    </span>print(&#34;OpenAI Response:&#34;, response)</pre><EOL><pre class="line before"><span class="ws"></span> </pre><EOL><pre class="line before"><span class="ws">    </span>message_result = response.choices[0].message.content</pre><EOL><pre class="line before"><span class="ws"></span> </pre><EOL><pre class="line current"><span class="ws">    </span>locations = parse_text_to_json(message_result)<EOL><span class="ws">    </span>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">    </span>return jsonify({&#34;result&#34;: locations})</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws"></span>def parse_text_to_json(text):</pre><EOL><pre class="line after"><span class="ws"></span> </pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856698816"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\app.py"</cite>,<EOL>      line <em class="line">69</em>,<EOL>      in <code class="function">parse_text_to_json</code></h4><EOL>  <div class="source "><pre class="line before"><span class="ws">            </span>location_name = line.split(&#34;.&#34;)[1].strip()</pre><EOL><pre class="line before"><span class="ws">            </span>location = {&#34;name&#34;: location_name}</pre><EOL><pre class="line before"><span class="ws">        </span>elif &#34;- 주소:&#34; in line:</pre><EOL><pre class="line before"><span class="ws">            </span>address = line.split(&#34;:&#34;)[1].strip()</pre><EOL><pre class="line before"><span class="ws">            </span>location[&#34;address&#34;] = address</pre><EOL><pre class="line current"><span class="ws">    </span>if location:<EOL><span class="ws">    </span>   ^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">        </span>locations.append(location)</pre><EOL><pre class="line after"><span class="ws">    </span>return locations</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws"></span>if __name__ == &#39;__main__&#39;:</pre><EOL><pre class="line after"><span class="ws">    </span>app.run(host=&#39;127.0.0.1&#39;, debug=True, port=5001)</pre></div><EOL></div><EOL></ul><EOL>  <blockquote>UnboundLocalError: cannot access local variable &#39;location&#39; where it is not associated with a value<EOL></blockquote><EOL></div><EOL><EOL><div class="plain"><EOL>    <p><EOL>      This is the Copy/Paste friendly version of the traceback.<EOL>    </p><EOL>    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 1498, in __call__<EOL>    return self.wsgi_app(environ, start_response)<EOL>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 1476, in wsgi_app<EOL>    response = self.handle_exception(e)<EOL>               ^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py&#34;, line 194, in wrapped_function<EOL>    return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL>                                                ^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 1473, in wsgi_app<EOL>    response = self.full_dispatch_request()<EOL>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 882, in full_dispatch_request<EOL>    rv = self.handle_user_exception(e)<EOL>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py&#34;, line 194, in wrapped_function<EOL>    return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL>                                                ^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 880, in full_dispatch_request<EOL>    rv = self.dispatch_request()<EOL>         ^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 865, in dispatch_request<EOL>    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]<EOL>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\app.py&#34;, line 53, in TextMassageMaker<EOL>    locations = parse_text_to_json(message_result)<EOL>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\app.py&#34;, line 69, in parse_text_to_json<EOL>    if location:<EOL>       ^^^^^^^^^<EOL>UnboundLocalError: cannot access local variable &#39;location&#39; where it is not associated with a value<EOL></textarea><EOL></div><EOL><div class="explanation"><EOL>  The debugger caught an exception in your WSGI application.  You can now<EOL>  look at the traceback which led to the error.  <span class="nojavascript"><EOL>  If you enable JavaScript you can also use additional features such as code<EOL>  execution (if the evalex feature is enabled), automatic pasting of the<EOL>  exceptions and much more.</span><EOL></div><EOL>      <div class="footer"><EOL>        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your<EOL>        friendly Werkzeug powered traceback interpreter.<EOL>      </div><EOL>    </div><EOL><EOL>    <div class="pin-prompt"><EOL>      <div class="inner"><EOL>        <h3>Console Locked</h3><EOL>        <p><EOL>          The console is locked and needs to be unlocked by entering the PIN.<EOL>          You can find the PIN printed out on the standard output of your<EOL>          shell that runs the server.<EOL>        <form><EOL>          <p>PIN:<EOL>            <input type=text name=pin size=14><EOL>            <input type=submit name=btn value="Confirm Pin"><EOL>        </form><EOL>      </div><EOL>    </div><EOL>  </body><EOL></html><EOL><EOL><!--<EOL><EOL>Traceback (most recent call last):<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 1498, in __call__<EOL>    return self.wsgi_app(environ, start_response)<EOL>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 1476, in wsgi_app<EOL>    response = self.handle_exception(e)<EOL>               ^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py", line 194, in wrapped_function<EOL>    return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL>                                                ^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 1473, in wsgi_app<EOL>    response = self.full_dispatch_request()<EOL>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 882, in full_dispatch_request<EOL>    rv = self.handle_user_exception(e)<EOL>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py", line 194, in wrapped_function<EOL>    return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL>                                                ^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 880, in full_dispatch_request<EOL>    rv = self.dispatch_request()<EOL>         ^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 865, in dispatch_request<EOL>    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]<EOL>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\app.py", line 53, in TextMassageMaker<EOL>    locations = parse_text_to_json(message_result)<EOL>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\app.py", line 69, in parse_text_to_json<EOL>    if location:<EOL>       ^^^^^^^^^<EOL>UnboundLocalError: cannot access local variable 'location' where it is not associated with a value<EOL><EOL><EOL>--><EOL>"] with root cause
org.springframework.web.client.HttpServerErrorException$InternalServerError: 500 INTERNAL SERVER ERROR: "<!doctype html><EOL><html lang=en><EOL>  <head><EOL>    <title>UnboundLocalError: cannot access local variable &#39;location&#39; where it is not associated with a value<EOL> // Werkzeug Debugger</title><EOL>    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"><EOL>    <link rel="shortcut icon"<EOL>        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png"><EOL>    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script><EOL>    <script><EOL>      var CONSOLE_MODE = false,<EOL>          EVALEX = true,<EOL>          EVALEX_TRUSTED = false,<EOL>          SECRET = "58vy5jYfzcmz0BuvZzoK";<EOL>    </script><EOL>  </head><EOL>  <body style="background-color: #fff"><EOL>    <div class="debugger"><EOL><h1>UnboundLocalError</h1><EOL><div class="detail"><EOL>  <p class="errormsg">UnboundLocalError: cannot access local variable &#39;location&#39; where it is not associated with a value<EOL></p><EOL></div><EOL><h2 class="traceback">Traceback <em>(most recent call last)</em></h2><EOL><div class="traceback"><EOL>  <h3></h3><EOL>  <ul><li><div class="frame" id="frame-2243856696944"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">1498</em>,<EOL>      in <code class="function">__call__</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre><EOL><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre><EOL><pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre><EOL><pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre><EOL><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre><EOL><pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)<EOL><span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856697664"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">1476</em>,<EOL>      in <code class="function">wsgi_app</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre><EOL><pre class="line before"><span class="ws">                </span>ctx.push()</pre><EOL><pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre><EOL><pre class="line before"><span class="ws">            </span>except Exception as e:</pre><EOL><pre class="line before"><span class="ws">                </span>error = e</pre><EOL><pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)<EOL><span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre><EOL><pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre><EOL><pre class="line after"><span class="ws">                </span>raise</pre><EOL><pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre><EOL><pre class="line after"><span class="ws">        </span>finally:</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856697808"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py"</cite>,<EOL>      line <em class="line">194</em>,<EOL>      in <code class="function">wrapped_function</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre><EOL><pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre><EOL><pre class="line before"><span class="ws">        </span>if options.get(&#39;intercept_exceptions&#39;, True):</pre><EOL><pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre><EOL><pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre><EOL><pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL><span class="ws">                    </span>                                            ^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">                </span>return wrapped_function</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">            </span>if hasattr(app, &#39;handle_exception&#39;):</pre><EOL><pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre><EOL><pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856697952"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">1473</em>,<EOL>      in <code class="function">wsgi_app</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre><EOL><pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre><EOL><pre class="line before"><span class="ws">        </span>try:</pre><EOL><pre class="line before"><span class="ws">            </span>try:</pre><EOL><pre class="line before"><span class="ws">                </span>ctx.push()</pre><EOL><pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()<EOL><span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">            </span>except Exception as e:</pre><EOL><pre class="line after"><span class="ws">                </span>error = e</pre><EOL><pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre><EOL><pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre><EOL><pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856698096"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">882</em>,<EOL>      in <code class="function">full_dispatch_request</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre><EOL><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre><EOL><pre class="line before"><span class="ws">            </span>if rv is None:</pre><EOL><pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre><EOL><pre class="line before"><span class="ws">        </span>except Exception as e:</pre><EOL><pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)<EOL><span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">    </span>def finalize_request(</pre><EOL><pre class="line after"><span class="ws">        </span>self,</pre><EOL><pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856698240"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py"</cite>,<EOL>      line <em class="line">194</em>,<EOL>      in <code class="function">wrapped_function</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre><EOL><pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre><EOL><pre class="line before"><span class="ws">        </span>if options.get(&#39;intercept_exceptions&#39;, True):</pre><EOL><pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre><EOL><pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre><EOL><pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL><span class="ws">                    </span>                                            ^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">                </span>return wrapped_function</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">            </span>if hasattr(app, &#39;handle_exception&#39;):</pre><EOL><pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre><EOL><pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856698384"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">880</em>,<EOL>      in <code class="function">full_dispatch_request</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws"></span> </pre><EOL><pre class="line before"><span class="ws">        </span>try:</pre><EOL><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre><EOL><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre><EOL><pre class="line before"><span class="ws">            </span>if rv is None:</pre><EOL><pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()<EOL><span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">        </span>except Exception as e:</pre><EOL><pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre><EOL><pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856698528"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">865</em>,<EOL>      in <code class="function">dispatch_request</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre><EOL><pre class="line before"><span class="ws">        </span>):</pre><EOL><pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre><EOL><pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre><EOL><pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre><EOL><pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]<EOL><span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre><EOL><pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre><EOL><pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre><EOL><pre class="line after"><span class="ws">        </span>error handling.</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856698672"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\app.py"</cite>,<EOL>      line <em class="line">53</em>,<EOL>      in <code class="function">TextMassageMaker</code></h4><EOL>  <div class="source "><pre class="line before"><span class="ws">    </span>print(&#34;API 응답 수신&#34;)</pre><EOL><pre class="line before"><span class="ws">    </span>print(&#34;OpenAI Response:&#34;, response)</pre><EOL><pre class="line before"><span class="ws"></span> </pre><EOL><pre class="line before"><span class="ws">    </span>message_result = response.choices[0].message.content</pre><EOL><pre class="line before"><span class="ws"></span> </pre><EOL><pre class="line current"><span class="ws">    </span>locations = parse_text_to_json(message_result)<EOL><span class="ws">    </span>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">    </span>return jsonify({&#34;result&#34;: locations})</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws"></span>def parse_text_to_json(text):</pre><EOL><pre class="line after"><span class="ws"></span> </pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2243856698816"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\app.py"</cite>,<EOL>      line <em class="line">69</em>,<EOL>      in <code class="function">parse_text_to_json</code></h4><EOL>  <div class="source "><pre class="line before"><span class="ws">            </span>location_name = line.split(&#34;.&#34;)[1].strip()</pre><EOL><pre class="line before"><span class="ws">            </span>location = {&#34;name&#34;: location_name}</pre><EOL><pre class="line before"><span class="ws">        </span>elif &#34;- 주소:&#34; in line:</pre><EOL><pre class="line before"><span class="ws">            </span>address = line.split(&#34;:&#34;)[1].strip()</pre><EOL><pre class="line before"><span class="ws">            </span>location[&#34;address&#34;] = address</pre><EOL><pre class="line current"><span class="ws">    </span>if location:<EOL><span class="ws">    </span>   ^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">        </span>locations.append(location)</pre><EOL><pre class="line after"><span class="ws">    </span>return locations</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws"></span>if __name__ == &#39;__main__&#39;:</pre><EOL><pre class="line after"><span class="ws">    </span>app.run(host=&#39;127.0.0.1&#39;, debug=True, port=5001)</pre></div><EOL></div><EOL></ul><EOL>  <blockquote>UnboundLocalError: cannot access local variable &#39;location&#39; where it is not associated with a value<EOL></blockquote><EOL></div><EOL><EOL><div class="plain"><EOL>    <p><EOL>      This is the Copy/Paste friendly version of the traceback.<EOL>    </p><EOL>    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 1498, in __call__<EOL>    return self.wsgi_app(environ, start_response)<EOL>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 1476, in wsgi_app<EOL>    response = self.handle_exception(e)<EOL>               ^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py&#34;, line 194, in wrapped_function<EOL>    return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL>                                                ^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 1473, in wsgi_app<EOL>    response = self.full_dispatch_request()<EOL>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 882, in full_dispatch_request<EOL>    rv = self.handle_user_exception(e)<EOL>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py&#34;, line 194, in wrapped_function<EOL>    return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL>                                                ^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 880, in full_dispatch_request<EOL>    rv = self.dispatch_request()<EOL>         ^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 865, in dispatch_request<EOL>    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]<EOL>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\app.py&#34;, line 53, in TextMassageMaker<EOL>    locations = parse_text_to_json(message_result)<EOL>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\app.py&#34;, line 69, in parse_text_to_json<EOL>    if location:<EOL>       ^^^^^^^^^<EOL>UnboundLocalError: cannot access local variable &#39;location&#39; where it is not associated with a value<EOL></textarea><EOL></div><EOL><div class="explanation"><EOL>  The debugger caught an exception in your WSGI application.  You can now<EOL>  look at the traceback which led to the error.  <span class="nojavascript"><EOL>  If you enable JavaScript you can also use additional features such as code<EOL>  execution (if the evalex feature is enabled), automatic pasting of the<EOL>  exceptions and much more.</span><EOL></div><EOL>      <div class="footer"><EOL>        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your<EOL>        friendly Werkzeug powered traceback interpreter.<EOL>      </div><EOL>    </div><EOL><EOL>    <div class="pin-prompt"><EOL>      <div class="inner"><EOL>        <h3>Console Locked</h3><EOL>        <p><EOL>          The console is locked and needs to be unlocked by entering the PIN.<EOL>          You can find the PIN printed out on the standard output of your<EOL>          shell that runs the server.<EOL>        <form><EOL>          <p>PIN:<EOL>            <input type=text name=pin size=14><EOL>            <input type=submit name=btn value="Confirm Pin"><EOL>        </form><EOL>      </div><EOL>    </div><EOL>  </body><EOL></html><EOL><EOL><!--<EOL><EOL>Traceback (most recent call last):<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 1498, in __call__<EOL>    return self.wsgi_app(environ, start_response)<EOL>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 1476, in wsgi_app<EOL>    response = self.handle_exception(e)<EOL>               ^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py", line 194, in wrapped_function<EOL>    return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL>                                                ^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 1473, in wsgi_app<EOL>    response = self.full_dispatch_request()<EOL>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 882, in full_dispatch_request<EOL>    rv = self.handle_user_exception(e)<EOL>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py", line 194, in wrapped_function<EOL>    return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL>                                                ^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 880, in full_dispatch_request<EOL>    rv = self.dispatch_request()<EOL>         ^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 865, in dispatch_request<EOL>    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]<EOL>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\app.py", line 53, in TextMassageMaker<EOL>    locations = parse_text_to_json(message_result)<EOL>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\app.py", line 69, in parse_text_to_json<EOL>    if location:<EOL>       ^^^^^^^^^<EOL>UnboundLocalError: cannot access local variable 'location' where it is not associated with a value<EOL><EOL><EOL>--><EOL>"
	at org.springframework.web.client.HttpServerErrorException.create(HttpServerErrorException.java:102)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:186)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:137)
	at org.springframework.web.client.ResponseErrorHandler.handleError(ResponseErrorHandler.java:63)
	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:942)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:891)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:790)
	at org.springframework.web.client.RestTemplate.postForEntity(RestTemplate.java:538)
	at com.example.demo.service.RecommendedService.sendQuestionToFlask(RecommendedService.java:45)
	at com.example.demo.controller.UsrRecommendedController.askQuestion(UsrRecommendedController.java:32)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-09-20 16:11:33 [ERROR] o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.web.client.HttpServerErrorException$InternalServerError: 500 INTERNAL SERVER ERROR: "<!doctype html><EOL><html lang=en><EOL>  <head><EOL>    <title>IndexError: list index out of range<EOL> // Werkzeug Debugger</title><EOL>    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"><EOL>    <link rel="shortcut icon"<EOL>        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png"><EOL>    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script><EOL>    <script><EOL>      var CONSOLE_MODE = false,<EOL>          EVALEX = true,<EOL>          EVALEX_TRUSTED = false,<EOL>          SECRET = "rzNkkwuwjDWlD2IP0Pqa";<EOL>    </script><EOL>  </head><EOL>  <body style="background-color: #fff"><EOL>    <div class="debugger"><EOL><h1>IndexError</h1><EOL><div class="detail"><EOL>  <p class="errormsg">IndexError: list index out of range<EOL></p><EOL></div><EOL><h2 class="traceback">Traceback <em>(most recent call last)</em></h2><EOL><div class="traceback"><EOL>  <h3></h3><EOL>  <ul><li><div class="frame" id="frame-2432020296704"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">1498</em>,<EOL>      in <code class="function">__call__</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre><EOL><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre><EOL><pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre><EOL><pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre><EOL><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre><EOL><pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)<EOL><span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2432020298144"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">1476</em>,<EOL>      in <code class="function">wsgi_app</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre><EOL><pre class="line before"><span class="ws">                </span>ctx.push()</pre><EOL><pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre><EOL><pre class="line before"><span class="ws">            </span>except Exception as e:</pre><EOL><pre class="line before"><span class="ws">                </span>error = e</pre><EOL><pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)<EOL><span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre><EOL><pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre><EOL><pre class="line after"><span class="ws">                </span>raise</pre><EOL><pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre><EOL><pre class="line after"><span class="ws">        </span>finally:</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2432020299584"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py"</cite>,<EOL>      line <em class="line">194</em>,<EOL>      in <code class="function">wrapped_function</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre><EOL><pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre><EOL><pre class="line before"><span class="ws">        </span>if options.get(&#39;intercept_exceptions&#39;, True):</pre><EOL><pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre><EOL><pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre><EOL><pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL><span class="ws">                    </span>                                            ^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">                </span>return wrapped_function</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">            </span>if hasattr(app, &#39;handle_exception&#39;):</pre><EOL><pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre><EOL><pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2432021725680"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">1473</em>,<EOL>      in <code class="function">wsgi_app</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre><EOL><pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre><EOL><pre class="line before"><span class="ws">        </span>try:</pre><EOL><pre class="line before"><span class="ws">            </span>try:</pre><EOL><pre class="line before"><span class="ws">                </span>ctx.push()</pre><EOL><pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()<EOL><span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">            </span>except Exception as e:</pre><EOL><pre class="line after"><span class="ws">                </span>error = e</pre><EOL><pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre><EOL><pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre><EOL><pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2432021725824"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">882</em>,<EOL>      in <code class="function">full_dispatch_request</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre><EOL><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre><EOL><pre class="line before"><span class="ws">            </span>if rv is None:</pre><EOL><pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre><EOL><pre class="line before"><span class="ws">        </span>except Exception as e:</pre><EOL><pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)<EOL><span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">    </span>def finalize_request(</pre><EOL><pre class="line after"><span class="ws">        </span>self,</pre><EOL><pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2432021725968"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py"</cite>,<EOL>      line <em class="line">194</em>,<EOL>      in <code class="function">wrapped_function</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre><EOL><pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre><EOL><pre class="line before"><span class="ws">        </span>if options.get(&#39;intercept_exceptions&#39;, True):</pre><EOL><pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre><EOL><pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre><EOL><pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL><span class="ws">                    </span>                                            ^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">                </span>return wrapped_function</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">            </span>if hasattr(app, &#39;handle_exception&#39;):</pre><EOL><pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre><EOL><pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2432021726112"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">880</em>,<EOL>      in <code class="function">full_dispatch_request</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws"></span> </pre><EOL><pre class="line before"><span class="ws">        </span>try:</pre><EOL><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre><EOL><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre><EOL><pre class="line before"><span class="ws">            </span>if rv is None:</pre><EOL><pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()<EOL><span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">        </span>except Exception as e:</pre><EOL><pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre><EOL><pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2432021726256"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">865</em>,<EOL>      in <code class="function">dispatch_request</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre><EOL><pre class="line before"><span class="ws">        </span>):</pre><EOL><pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre><EOL><pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre><EOL><pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre><EOL><pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]<EOL><span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre><EOL><pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre><EOL><pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre><EOL><pre class="line after"><span class="ws">        </span>error handling.</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2432021726400"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\app.py"</cite>,<EOL>      line <em class="line">53</em>,<EOL>      in <code class="function">TextMassageMaker</code></h4><EOL>  <div class="source "><pre class="line before"><span class="ws">    </span>print(&#34;API 응답 수신&#34;)</pre><EOL><pre class="line before"><span class="ws">    </span>print(&#34;OpenAI Response:&#34;, response)</pre><EOL><pre class="line before"><span class="ws"></span> </pre><EOL><pre class="line before"><span class="ws">    </span>message_result = response.choices[0].message.content</pre><EOL><pre class="line before"><span class="ws"></span> </pre><EOL><pre class="line current"><span class="ws">    </span>locations = parse_text_to_json(message_result)<EOL><span class="ws">    </span>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">    </span>return jsonify({&#34;result&#34;: locations})</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws"></span>def parse_text_to_json(text):</pre><EOL><pre class="line after"><span class="ws">    </span>locations = [] # 각 장소 정보를 저장할 리스트</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2432021726688"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\app.py"</cite>,<EOL>      line <em class="line">70</em>,<EOL>      in <code class="function">parse_text_to_json</code></h4><EOL>  <div class="source "><pre class="line before"><span class="ws">            </span>if location:  # 이전 location이 존재하면 리스트에 추가</pre><EOL><pre class="line before"><span class="ws">                </span>locations.append(location)</pre><EOL><pre class="line before"><span class="ws">            </span>location_name = line.split(&#34;.&#34;)[1].strip()</pre><EOL><pre class="line before"><span class="ws">            </span>location = {&#34;name&#34;: location_name}  # 새로운 location 객체 생성</pre><EOL><pre class="line before"><span class="ws">        </span>elif line in line:</pre><EOL><pre class="line current"><span class="ws">            </span>address = line.split(&#34;-&#34;)[1].strip()<EOL><span class="ws">            </span>          ^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">            </span>if location is not None:  # location이 초기화된 경우에만 추가</pre><EOL><pre class="line after"><span class="ws">                </span>location[&#34;address&#34;] = address</pre><EOL><pre class="line after"><span class="ws">        </span>else:</pre><EOL><pre class="line after"><span class="ws">            </span>continue</pre><EOL><pre class="line after"><span class="ws"></span> </pre></div><EOL></div><EOL></ul><EOL>  <blockquote>IndexError: list index out of range<EOL></blockquote><EOL></div><EOL><EOL><div class="plain"><EOL>    <p><EOL>      This is the Copy/Paste friendly version of the traceback.<EOL>    </p><EOL>    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 1498, in __call__<EOL>    return self.wsgi_app(environ, start_response)<EOL>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 1476, in wsgi_app<EOL>    response = self.handle_exception(e)<EOL>               ^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py&#34;, line 194, in wrapped_function<EOL>    return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL>                                                ^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 1473, in wsgi_app<EOL>    response = self.full_dispatch_request()<EOL>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 882, in full_dispatch_request<EOL>    rv = self.handle_user_exception(e)<EOL>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py&#34;, line 194, in wrapped_function<EOL>    return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL>                                                ^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 880, in full_dispatch_request<EOL>    rv = self.dispatch_request()<EOL>         ^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 865, in dispatch_request<EOL>    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]<EOL>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\app.py&#34;, line 53, in TextMassageMaker<EOL>    locations = parse_text_to_json(message_result)<EOL>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\app.py&#34;, line 70, in parse_text_to_json<EOL>    address = line.split(&#34;-&#34;)[1].strip()<EOL>              ^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>IndexError: list index out of range<EOL></textarea><EOL></div><EOL><div class="explanation"><EOL>  The debugger caught an exception in your WSGI application.  You can now<EOL>  look at the traceback which led to the error.  <span class="nojavascript"><EOL>  If you enable JavaScript you can also use additional features such as code<EOL>  execution (if the evalex feature is enabled), automatic pasting of the<EOL>  exceptions and much more.</span><EOL></div><EOL>      <div class="footer"><EOL>        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your<EOL>        friendly Werkzeug powered traceback interpreter.<EOL>      </div><EOL>    </div><EOL><EOL>    <div class="pin-prompt"><EOL>      <div class="inner"><EOL>        <h3>Console Locked</h3><EOL>        <p><EOL>          The console is locked and needs to be unlocked by entering the PIN.<EOL>          You can find the PIN printed out on the standard output of your<EOL>          shell that runs the server.<EOL>        <form><EOL>          <p>PIN:<EOL>            <input type=text name=pin size=14><EOL>            <input type=submit name=btn value="Confirm Pin"><EOL>        </form><EOL>      </div><EOL>    </div><EOL>  </body><EOL></html><EOL><EOL><!--<EOL><EOL>Traceback (most recent call last):<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 1498, in __call__<EOL>    return self.wsgi_app(environ, start_response)<EOL>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 1476, in wsgi_app<EOL>    response = self.handle_exception(e)<EOL>               ^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py", line 194, in wrapped_function<EOL>    return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL>                                                ^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 1473, in wsgi_app<EOL>    response = self.full_dispatch_request()<EOL>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 882, in full_dispatch_request<EOL>    rv = self.handle_user_exception(e)<EOL>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py", line 194, in wrapped_function<EOL>    return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL>                                                ^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 880, in full_dispatch_request<EOL>    rv = self.dispatch_request()<EOL>         ^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 865, in dispatch_request<EOL>    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]<EOL>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\app.py", line 53, in TextMassageMaker<EOL>    locations = parse_text_to_json(message_result)<EOL>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\app.py", line 70, in parse_text_to_json<EOL>    address = line.split("-")[1].strip()<EOL>              ^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>IndexError: list index out of range<EOL><EOL><EOL>--><EOL>"] with root cause
org.springframework.web.client.HttpServerErrorException$InternalServerError: 500 INTERNAL SERVER ERROR: "<!doctype html><EOL><html lang=en><EOL>  <head><EOL>    <title>IndexError: list index out of range<EOL> // Werkzeug Debugger</title><EOL>    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"><EOL>    <link rel="shortcut icon"<EOL>        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png"><EOL>    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script><EOL>    <script><EOL>      var CONSOLE_MODE = false,<EOL>          EVALEX = true,<EOL>          EVALEX_TRUSTED = false,<EOL>          SECRET = "rzNkkwuwjDWlD2IP0Pqa";<EOL>    </script><EOL>  </head><EOL>  <body style="background-color: #fff"><EOL>    <div class="debugger"><EOL><h1>IndexError</h1><EOL><div class="detail"><EOL>  <p class="errormsg">IndexError: list index out of range<EOL></p><EOL></div><EOL><h2 class="traceback">Traceback <em>(most recent call last)</em></h2><EOL><div class="traceback"><EOL>  <h3></h3><EOL>  <ul><li><div class="frame" id="frame-2432020296704"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">1498</em>,<EOL>      in <code class="function">__call__</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre><EOL><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre><EOL><pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre><EOL><pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre><EOL><pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre><EOL><pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)<EOL><span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2432020298144"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">1476</em>,<EOL>      in <code class="function">wsgi_app</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre><EOL><pre class="line before"><span class="ws">                </span>ctx.push()</pre><EOL><pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre><EOL><pre class="line before"><span class="ws">            </span>except Exception as e:</pre><EOL><pre class="line before"><span class="ws">                </span>error = e</pre><EOL><pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)<EOL><span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre><EOL><pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre><EOL><pre class="line after"><span class="ws">                </span>raise</pre><EOL><pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre><EOL><pre class="line after"><span class="ws">        </span>finally:</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2432020299584"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py"</cite>,<EOL>      line <em class="line">194</em>,<EOL>      in <code class="function">wrapped_function</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre><EOL><pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre><EOL><pre class="line before"><span class="ws">        </span>if options.get(&#39;intercept_exceptions&#39;, True):</pre><EOL><pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre><EOL><pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre><EOL><pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL><span class="ws">                    </span>                                            ^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">                </span>return wrapped_function</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">            </span>if hasattr(app, &#39;handle_exception&#39;):</pre><EOL><pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre><EOL><pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2432021725680"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">1473</em>,<EOL>      in <code class="function">wsgi_app</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre><EOL><pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre><EOL><pre class="line before"><span class="ws">        </span>try:</pre><EOL><pre class="line before"><span class="ws">            </span>try:</pre><EOL><pre class="line before"><span class="ws">                </span>ctx.push()</pre><EOL><pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()<EOL><span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">            </span>except Exception as e:</pre><EOL><pre class="line after"><span class="ws">                </span>error = e</pre><EOL><pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre><EOL><pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre><EOL><pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2432021725824"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">882</em>,<EOL>      in <code class="function">full_dispatch_request</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre><EOL><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre><EOL><pre class="line before"><span class="ws">            </span>if rv is None:</pre><EOL><pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre><EOL><pre class="line before"><span class="ws">        </span>except Exception as e:</pre><EOL><pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)<EOL><span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">    </span>def finalize_request(</pre><EOL><pre class="line after"><span class="ws">        </span>self,</pre><EOL><pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2432021725968"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py"</cite>,<EOL>      line <em class="line">194</em>,<EOL>      in <code class="function">wrapped_function</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">        </span># Wrap exception handlers with cross_origin</pre><EOL><pre class="line before"><span class="ws">        </span># These error handlers will still respect the behavior of the route</pre><EOL><pre class="line before"><span class="ws">        </span>if options.get(&#39;intercept_exceptions&#39;, True):</pre><EOL><pre class="line before"><span class="ws">            </span>def _after_request_decorator(f):</pre><EOL><pre class="line before"><span class="ws">                </span>def wrapped_function(*args, **kwargs):</pre><EOL><pre class="line current"><span class="ws">                    </span>return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL><span class="ws">                    </span>                                            ^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">                </span>return wrapped_function</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">            </span>if hasattr(app, &#39;handle_exception&#39;):</pre><EOL><pre class="line after"><span class="ws">                </span>app.handle_exception = _after_request_decorator(</pre><EOL><pre class="line after"><span class="ws">                    </span>app.handle_exception)</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2432021726112"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">880</em>,<EOL>      in <code class="function">full_dispatch_request</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws"></span> </pre><EOL><pre class="line before"><span class="ws">        </span>try:</pre><EOL><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre><EOL><pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre><EOL><pre class="line before"><span class="ws">            </span>if rv is None:</pre><EOL><pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()<EOL><span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">        </span>except Exception as e:</pre><EOL><pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre><EOL><pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2432021726256"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\env\Lib\site-packages\flask\app.py"</cite>,<EOL>      line <em class="line">865</em>,<EOL>      in <code class="function">dispatch_request</code></h4><EOL>  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre><EOL><pre class="line before"><span class="ws">        </span>):</pre><EOL><pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre><EOL><pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre><EOL><pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre><EOL><pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]<EOL><span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre><EOL><pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre><EOL><pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre><EOL><pre class="line after"><span class="ws">        </span>error handling.</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2432021726400"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\app.py"</cite>,<EOL>      line <em class="line">53</em>,<EOL>      in <code class="function">TextMassageMaker</code></h4><EOL>  <div class="source "><pre class="line before"><span class="ws">    </span>print(&#34;API 응답 수신&#34;)</pre><EOL><pre class="line before"><span class="ws">    </span>print(&#34;OpenAI Response:&#34;, response)</pre><EOL><pre class="line before"><span class="ws"></span> </pre><EOL><pre class="line before"><span class="ws">    </span>message_result = response.choices[0].message.content</pre><EOL><pre class="line before"><span class="ws"></span> </pre><EOL><pre class="line current"><span class="ws">    </span>locations = parse_text_to_json(message_result)<EOL><span class="ws">    </span>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws">    </span>return jsonify({&#34;result&#34;: locations})</pre><EOL><pre class="line after"><span class="ws"></span> </pre><EOL><pre class="line after"><span class="ws"></span>def parse_text_to_json(text):</pre><EOL><pre class="line after"><span class="ws">    </span>locations = [] # 각 장소 정보를 저장할 리스트</pre></div><EOL></div><EOL><EOL><li><div class="frame" id="frame-2432021726688"><EOL>  <h4>File <cite class="filename">"C:\dev\python\hello\app.py"</cite>,<EOL>      line <em class="line">70</em>,<EOL>      in <code class="function">parse_text_to_json</code></h4><EOL>  <div class="source "><pre class="line before"><span class="ws">            </span>if location:  # 이전 location이 존재하면 리스트에 추가</pre><EOL><pre class="line before"><span class="ws">                </span>locations.append(location)</pre><EOL><pre class="line before"><span class="ws">            </span>location_name = line.split(&#34;.&#34;)[1].strip()</pre><EOL><pre class="line before"><span class="ws">            </span>location = {&#34;name&#34;: location_name}  # 새로운 location 객체 생성</pre><EOL><pre class="line before"><span class="ws">        </span>elif line in line:</pre><EOL><pre class="line current"><span class="ws">            </span>address = line.split(&#34;-&#34;)[1].strip()<EOL><span class="ws">            </span>          ^^^^^^^^^^^^^^^^^^</pre><EOL><pre class="line after"><span class="ws">            </span>if location is not None:  # location이 초기화된 경우에만 추가</pre><EOL><pre class="line after"><span class="ws">                </span>location[&#34;address&#34;] = address</pre><EOL><pre class="line after"><span class="ws">        </span>else:</pre><EOL><pre class="line after"><span class="ws">            </span>continue</pre><EOL><pre class="line after"><span class="ws"></span> </pre></div><EOL></div><EOL></ul><EOL>  <blockquote>IndexError: list index out of range<EOL></blockquote><EOL></div><EOL><EOL><div class="plain"><EOL>    <p><EOL>      This is the Copy/Paste friendly version of the traceback.<EOL>    </p><EOL>    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 1498, in __call__<EOL>    return self.wsgi_app(environ, start_response)<EOL>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 1476, in wsgi_app<EOL>    response = self.handle_exception(e)<EOL>               ^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py&#34;, line 194, in wrapped_function<EOL>    return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL>                                                ^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 1473, in wsgi_app<EOL>    response = self.full_dispatch_request()<EOL>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 882, in full_dispatch_request<EOL>    rv = self.handle_user_exception(e)<EOL>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py&#34;, line 194, in wrapped_function<EOL>    return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL>                                                ^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 880, in full_dispatch_request<EOL>    rv = self.dispatch_request()<EOL>         ^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\env\Lib\site-packages\flask\app.py&#34;, line 865, in dispatch_request<EOL>    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]<EOL>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\app.py&#34;, line 53, in TextMassageMaker<EOL>    locations = parse_text_to_json(message_result)<EOL>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File &#34;C:\dev\python\hello\app.py&#34;, line 70, in parse_text_to_json<EOL>    address = line.split(&#34;-&#34;)[1].strip()<EOL>              ^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>IndexError: list index out of range<EOL></textarea><EOL></div><EOL><div class="explanation"><EOL>  The debugger caught an exception in your WSGI application.  You can now<EOL>  look at the traceback which led to the error.  <span class="nojavascript"><EOL>  If you enable JavaScript you can also use additional features such as code<EOL>  execution (if the evalex feature is enabled), automatic pasting of the<EOL>  exceptions and much more.</span><EOL></div><EOL>      <div class="footer"><EOL>        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your<EOL>        friendly Werkzeug powered traceback interpreter.<EOL>      </div><EOL>    </div><EOL><EOL>    <div class="pin-prompt"><EOL>      <div class="inner"><EOL>        <h3>Console Locked</h3><EOL>        <p><EOL>          The console is locked and needs to be unlocked by entering the PIN.<EOL>          You can find the PIN printed out on the standard output of your<EOL>          shell that runs the server.<EOL>        <form><EOL>          <p>PIN:<EOL>            <input type=text name=pin size=14><EOL>            <input type=submit name=btn value="Confirm Pin"><EOL>        </form><EOL>      </div><EOL>    </div><EOL>  </body><EOL></html><EOL><EOL><!--<EOL><EOL>Traceback (most recent call last):<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 1498, in __call__<EOL>    return self.wsgi_app(environ, start_response)<EOL>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 1476, in wsgi_app<EOL>    response = self.handle_exception(e)<EOL>               ^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py", line 194, in wrapped_function<EOL>    return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL>                                                ^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 1473, in wsgi_app<EOL>    response = self.full_dispatch_request()<EOL>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 882, in full_dispatch_request<EOL>    rv = self.handle_user_exception(e)<EOL>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask_cors\extension.py", line 194, in wrapped_function<EOL>    return cors_after_request(app.make_response(f(*args, **kwargs)))<EOL>                                                ^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 880, in full_dispatch_request<EOL>    rv = self.dispatch_request()<EOL>         ^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\env\Lib\site-packages\flask\app.py", line 865, in dispatch_request<EOL>    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]<EOL>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\app.py", line 53, in TextMassageMaker<EOL>    locations = parse_text_to_json(message_result)<EOL>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>  File "C:\dev\python\hello\app.py", line 70, in parse_text_to_json<EOL>    address = line.split("-")[1].strip()<EOL>              ^^^^^^^^^^^^^^^^^^^^^^^^^^<EOL>IndexError: list index out of range<EOL><EOL><EOL>--><EOL>"
	at org.springframework.web.client.HttpServerErrorException.create(HttpServerErrorException.java:102)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:186)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:137)
	at org.springframework.web.client.ResponseErrorHandler.handleError(ResponseErrorHandler.java:63)
	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:942)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:891)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:790)
	at org.springframework.web.client.RestTemplate.postForEntity(RestTemplate.java:538)
	at com.example.demo.service.RecommendedService.sendQuestionToFlask(RecommendedService.java:45)
	at com.example.demo.controller.UsrRecommendedController.askQuestion(UsrRecommendedController.java:32)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-09-20 18:34:15 [ERROR] o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.web.client.ResourceAccessException: I/O error on POST request for "http://127.0.0.1:5001/api/text": Connection refused: connect] with root cause
java.net.ConnectException: Connection refused: connect
	at java.base/sun.nio.ch.Net.connect0(Native Method)
	at java.base/sun.nio.ch.Net.connect(Net.java:589)
	at java.base/sun.nio.ch.Net.connect(Net.java:578)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:583)
	at java.base/java.net.Socket.connect(Socket.java:751)
	at java.base/java.net.Socket.connect(Socket.java:686)
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:183)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:531)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:636)
	at java.base/sun.net.www.http.HttpClient.<init>(HttpClient.java:280)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:386)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:408)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1304)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1237)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1123)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:1052)
	at org.springframework.http.client.SimpleClientHttpRequest.executeInternal(SimpleClientHttpRequest.java:79)
	at org.springframework.http.client.AbstractStreamingClientHttpRequest.executeInternal(AbstractStreamingClientHttpRequest.java:70)
	at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:66)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:889)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:790)
	at org.springframework.web.client.RestTemplate.postForEntity(RestTemplate.java:538)
	at com.example.demo.service.RecommendedService.sendQuestionToFlask(RecommendedService.java:45)
	at com.example.demo.controller.UsrRecommendedController.askQuestion(UsrRecommendedController.java:32)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-09-20 18:34:17 [ERROR] o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.web.client.ResourceAccessException: I/O error on POST request for "http://127.0.0.1:5001/api/text": Connection refused: connect] with root cause
java.net.ConnectException: Connection refused: connect
	at java.base/sun.nio.ch.Net.connect0(Native Method)
	at java.base/sun.nio.ch.Net.connect(Net.java:589)
	at java.base/sun.nio.ch.Net.connect(Net.java:578)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:583)
	at java.base/java.net.Socket.connect(Socket.java:751)
	at java.base/java.net.Socket.connect(Socket.java:686)
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:183)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:531)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:636)
	at java.base/sun.net.www.http.HttpClient.<init>(HttpClient.java:280)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:386)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:408)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1304)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1237)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1123)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:1052)
	at org.springframework.http.client.SimpleClientHttpRequest.executeInternal(SimpleClientHttpRequest.java:79)
	at org.springframework.http.client.AbstractStreamingClientHttpRequest.executeInternal(AbstractStreamingClientHttpRequest.java:70)
	at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:66)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:889)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:790)
	at org.springframework.web.client.RestTemplate.postForEntity(RestTemplate.java:538)
	at com.example.demo.service.RecommendedService.sendQuestionToFlask(RecommendedService.java:45)
	at com.example.demo.controller.UsrRecommendedController.askQuestion(UsrRecommendedController.java:32)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-09-20 18:35:12 [ERROR] o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.web.client.ResourceAccessException: I/O error on POST request for "http://127.0.0.1:5001/api/text": Connection refused: connect] with root cause
java.net.ConnectException: Connection refused: connect
	at java.base/sun.nio.ch.Net.connect0(Native Method)
	at java.base/sun.nio.ch.Net.connect(Net.java:589)
	at java.base/sun.nio.ch.Net.connect(Net.java:578)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:583)
	at java.base/java.net.Socket.connect(Socket.java:751)
	at java.base/java.net.Socket.connect(Socket.java:686)
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:183)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:531)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:636)
	at java.base/sun.net.www.http.HttpClient.<init>(HttpClient.java:280)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:386)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:408)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1304)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1237)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1123)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:1052)
	at org.springframework.http.client.SimpleClientHttpRequest.executeInternal(SimpleClientHttpRequest.java:79)
	at org.springframework.http.client.AbstractStreamingClientHttpRequest.executeInternal(AbstractStreamingClientHttpRequest.java:70)
	at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:66)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:889)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:790)
	at org.springframework.web.client.RestTemplate.postForEntity(RestTemplate.java:538)
	at com.example.demo.service.RecommendedService.sendQuestionToFlask(RecommendedService.java:45)
	at com.example.demo.controller.UsrRecommendedController.askQuestion(UsrRecommendedController.java:32)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-09-20 18:35:14 [ERROR] o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.web.client.ResourceAccessException: I/O error on POST request for "http://127.0.0.1:5001/api/text": Connection refused: connect] with root cause
java.net.ConnectException: Connection refused: connect
	at java.base/sun.nio.ch.Net.connect0(Native Method)
	at java.base/sun.nio.ch.Net.connect(Net.java:589)
	at java.base/sun.nio.ch.Net.connect(Net.java:578)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:583)
	at java.base/java.net.Socket.connect(Socket.java:751)
	at java.base/java.net.Socket.connect(Socket.java:686)
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:183)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:531)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:636)
	at java.base/sun.net.www.http.HttpClient.<init>(HttpClient.java:280)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:386)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:408)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1304)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1237)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1123)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:1052)
	at org.springframework.http.client.SimpleClientHttpRequest.executeInternal(SimpleClientHttpRequest.java:79)
	at org.springframework.http.client.AbstractStreamingClientHttpRequest.executeInternal(AbstractStreamingClientHttpRequest.java:70)
	at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:66)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:889)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:790)
	at org.springframework.web.client.RestTemplate.postForEntity(RestTemplate.java:538)
	at com.example.demo.service.RecommendedService.sendQuestionToFlask(RecommendedService.java:45)
	at com.example.demo.controller.UsrRecommendedController.askQuestion(UsrRecommendedController.java:32)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-09-20 18:35:14 [ERROR] o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.web.client.ResourceAccessException: I/O error on POST request for "http://127.0.0.1:5001/api/text": Connection refused: connect] with root cause
java.net.ConnectException: Connection refused: connect
	at java.base/sun.nio.ch.Net.connect0(Native Method)
	at java.base/sun.nio.ch.Net.connect(Net.java:589)
	at java.base/sun.nio.ch.Net.connect(Net.java:578)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:583)
	at java.base/java.net.Socket.connect(Socket.java:751)
	at java.base/java.net.Socket.connect(Socket.java:686)
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:183)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:531)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:636)
	at java.base/sun.net.www.http.HttpClient.<init>(HttpClient.java:280)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:386)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:408)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1304)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1237)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1123)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:1052)
	at org.springframework.http.client.SimpleClientHttpRequest.executeInternal(SimpleClientHttpRequest.java:79)
	at org.springframework.http.client.AbstractStreamingClientHttpRequest.executeInternal(AbstractStreamingClientHttpRequest.java:70)
	at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:66)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:889)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:790)
	at org.springframework.web.client.RestTemplate.postForEntity(RestTemplate.java:538)
	at com.example.demo.service.RecommendedService.sendQuestionToFlask(RecommendedService.java:45)
	at com.example.demo.controller.UsrRecommendedController.askQuestion(UsrRecommendedController.java:32)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-09-20 18:35:14 [ERROR] o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.web.client.ResourceAccessException: I/O error on POST request for "http://127.0.0.1:5001/api/text": Connection refused: connect] with root cause
java.net.ConnectException: Connection refused: connect
	at java.base/sun.nio.ch.Net.connect0(Native Method)
	at java.base/sun.nio.ch.Net.connect(Net.java:589)
	at java.base/sun.nio.ch.Net.connect(Net.java:578)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:583)
	at java.base/java.net.Socket.connect(Socket.java:751)
	at java.base/java.net.Socket.connect(Socket.java:686)
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:183)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:531)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:636)
	at java.base/sun.net.www.http.HttpClient.<init>(HttpClient.java:280)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:386)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:408)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1304)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1237)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1123)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:1052)
	at org.springframework.http.client.SimpleClientHttpRequest.executeInternal(SimpleClientHttpRequest.java:79)
	at org.springframework.http.client.AbstractStreamingClientHttpRequest.executeInternal(AbstractStreamingClientHttpRequest.java:70)
	at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:66)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:889)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:790)
	at org.springframework.web.client.RestTemplate.postForEntity(RestTemplate.java:538)
	at com.example.demo.service.RecommendedService.sendQuestionToFlask(RecommendedService.java:45)
	at com.example.demo.controller.UsrRecommendedController.askQuestion(UsrRecommendedController.java:32)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-09-20 18:35:15 [ERROR] o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.web.client.ResourceAccessException: I/O error on POST request for "http://127.0.0.1:5001/api/text": Connection refused: connect] with root cause
java.net.ConnectException: Connection refused: connect
	at java.base/sun.nio.ch.Net.connect0(Native Method)
	at java.base/sun.nio.ch.Net.connect(Net.java:589)
	at java.base/sun.nio.ch.Net.connect(Net.java:578)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:583)
	at java.base/java.net.Socket.connect(Socket.java:751)
	at java.base/java.net.Socket.connect(Socket.java:686)
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:183)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:531)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:636)
	at java.base/sun.net.www.http.HttpClient.<init>(HttpClient.java:280)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:386)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:408)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1304)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1237)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1123)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:1052)
	at org.springframework.http.client.SimpleClientHttpRequest.executeInternal(SimpleClientHttpRequest.java:79)
	at org.springframework.http.client.AbstractStreamingClientHttpRequest.executeInternal(AbstractStreamingClientHttpRequest.java:70)
	at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:66)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:889)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:790)
	at org.springframework.web.client.RestTemplate.postForEntity(RestTemplate.java:538)
	at com.example.demo.service.RecommendedService.sendQuestionToFlask(RecommendedService.java:45)
	at com.example.demo.controller.UsrRecommendedController.askQuestion(UsrRecommendedController.java:32)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-09-20 18:35:16 [ERROR] o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.web.client.ResourceAccessException: I/O error on POST request for "http://127.0.0.1:5001/api/text": Connection refused: connect] with root cause
java.net.ConnectException: Connection refused: connect
	at java.base/sun.nio.ch.Net.connect0(Native Method)
	at java.base/sun.nio.ch.Net.connect(Net.java:589)
	at java.base/sun.nio.ch.Net.connect(Net.java:578)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:583)
	at java.base/java.net.Socket.connect(Socket.java:751)
	at java.base/java.net.Socket.connect(Socket.java:686)
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:183)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:531)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:636)
	at java.base/sun.net.www.http.HttpClient.<init>(HttpClient.java:280)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:386)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:408)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1304)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1237)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1123)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:1052)
	at org.springframework.http.client.SimpleClientHttpRequest.executeInternal(SimpleClientHttpRequest.java:79)
	at org.springframework.http.client.AbstractStreamingClientHttpRequest.executeInternal(AbstractStreamingClientHttpRequest.java:70)
	at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:66)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:889)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:790)
	at org.springframework.web.client.RestTemplate.postForEntity(RestTemplate.java:538)
	at com.example.demo.service.RecommendedService.sendQuestionToFlask(RecommendedService.java:45)
	at com.example.demo.controller.UsrRecommendedController.askQuestion(UsrRecommendedController.java:32)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2024-09-20 18:35:20 [ERROR] o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.web.client.ResourceAccessException: I/O error on POST request for "http://127.0.0.1:5001/api/text": Connection refused: connect] with root cause
java.net.ConnectException: Connection refused: connect
	at java.base/sun.nio.ch.Net.connect0(Native Method)
	at java.base/sun.nio.ch.Net.connect(Net.java:589)
	at java.base/sun.nio.ch.Net.connect(Net.java:578)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:583)
	at java.base/java.net.Socket.connect(Socket.java:751)
	at java.base/java.net.Socket.connect(Socket.java:686)
	at java.base/sun.net.NetworkClient.doConnect(NetworkClient.java:183)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:531)
	at java.base/sun.net.www.http.HttpClient.openServer(HttpClient.java:636)
	at java.base/sun.net.www.http.HttpClient.<init>(HttpClient.java:280)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:386)
	at java.base/sun.net.www.http.HttpClient.New(HttpClient.java:408)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1304)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1237)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1123)
	at java.base/sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:1052)
	at org.springframework.http.client.SimpleClientHttpRequest.executeInternal(SimpleClientHttpRequest.java:79)
	at org.springframework.http.client.AbstractStreamingClientHttpRequest.executeInternal(AbstractStreamingClientHttpRequest.java:70)
	at org.springframework.http.client.AbstractClientHttpRequest.execute(AbstractClientHttpRequest.java:66)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:889)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:790)
	at org.springframework.web.client.RestTemplate.postForEntity(RestTemplate.java:538)
	at com.example.demo.service.RecommendedService.sendQuestionToFlask(RecommendedService.java:45)
	at com.example.demo.controller.UsrRecommendedController.askQuestion(UsrRecommendedController.java:32)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:1583)
